
MCS_scrn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ea4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003f64  08003f64  00013f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f9c  08003f9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f9c  08003f9c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f9c  08003f9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f9c  08003f9c  00013f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fa0  08003fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  08003fb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08003fb0  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ec8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002baf  00000000  00000000  00032efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  00035ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  00036bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019896  00000000  00000000  00037bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157a1  00000000  00000000  0005145e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091bda  00000000  00000000  00066bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f87d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d18  00000000  00000000  000f882c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f4c 	.word	0x08003f4c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003f4c 	.word	0x08003f4c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <MX_CAN_Init+0x68>)
 8000226:	4a19      	ldr	r2, [pc, #100]	; (800028c <MX_CAN_Init+0x6c>)
 8000228:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800022a:	4b17      	ldr	r3, [pc, #92]	; (8000288 <MX_CAN_Init+0x68>)
 800022c:	2202      	movs	r2, #2
 800022e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <MX_CAN_Init+0x68>)
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000236:	4b14      	ldr	r3, [pc, #80]	; (8000288 <MX_CAN_Init+0x68>)
 8000238:	2200      	movs	r2, #0
 800023a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <MX_CAN_Init+0x68>)
 800023e:	22c0      	movs	r2, #192	; 0xc0
 8000240:	0312      	lsls	r2, r2, #12
 8000242:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <MX_CAN_Init+0x68>)
 8000246:	2280      	movs	r2, #128	; 0x80
 8000248:	0352      	lsls	r2, r2, #13
 800024a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800024c:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <MX_CAN_Init+0x68>)
 800024e:	2200      	movs	r2, #0
 8000250:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000252:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <MX_CAN_Init+0x68>)
 8000254:	2200      	movs	r2, #0
 8000256:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <MX_CAN_Init+0x68>)
 800025a:	2200      	movs	r2, #0
 800025c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800025e:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <MX_CAN_Init+0x68>)
 8000260:	2200      	movs	r2, #0
 8000262:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000264:	4b08      	ldr	r3, [pc, #32]	; (8000288 <MX_CAN_Init+0x68>)
 8000266:	2200      	movs	r2, #0
 8000268:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800026a:	4b07      	ldr	r3, [pc, #28]	; (8000288 <MX_CAN_Init+0x68>)
 800026c:	2200      	movs	r2, #0
 800026e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <MX_CAN_Init+0x68>)
 8000272:	0018      	movs	r0, r3
 8000274:	f000 fc74 	bl	8000b60 <HAL_CAN_Init>
 8000278:	1e03      	subs	r3, r0, #0
 800027a:	d001      	beq.n	8000280 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800027c:	f000 fa63 	bl	8000746 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000280:	46c0      	nop			; (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000028 	.word	0x20000028
 800028c:	40006400 	.word	0x40006400

08000290 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b08b      	sub	sp, #44	; 0x2c
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000298:	2414      	movs	r4, #20
 800029a:	193b      	adds	r3, r7, r4
 800029c:	0018      	movs	r0, r3
 800029e:	2314      	movs	r3, #20
 80002a0:	001a      	movs	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	f003 fe4a 	bl	8003f3c <memset>
  if(canHandle->Instance==CAN)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a20      	ldr	r2, [pc, #128]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d13a      	bne.n	8000328 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002b2:	4b20      	ldr	r3, [pc, #128]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 80002b4:	69da      	ldr	r2, [r3, #28]
 80002b6:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 80002b8:	2180      	movs	r1, #128	; 0x80
 80002ba:	0489      	lsls	r1, r1, #18
 80002bc:	430a      	orrs	r2, r1
 80002be:	61da      	str	r2, [r3, #28]
 80002c0:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 80002c2:	69da      	ldr	r2, [r3, #28]
 80002c4:	2380      	movs	r3, #128	; 0x80
 80002c6:	049b      	lsls	r3, r3, #18
 80002c8:	4013      	ands	r3, r2
 80002ca:	613b      	str	r3, [r7, #16]
 80002cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ce:	4b19      	ldr	r3, [pc, #100]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 80002d0:	695a      	ldr	r2, [r3, #20]
 80002d2:	4b18      	ldr	r3, [pc, #96]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 80002d4:	2180      	movs	r1, #128	; 0x80
 80002d6:	02c9      	lsls	r1, r1, #11
 80002d8:	430a      	orrs	r2, r1
 80002da:	615a      	str	r2, [r3, #20]
 80002dc:	4b15      	ldr	r3, [pc, #84]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 80002de:	695a      	ldr	r2, [r3, #20]
 80002e0:	2380      	movs	r3, #128	; 0x80
 80002e2:	02db      	lsls	r3, r3, #11
 80002e4:	4013      	ands	r3, r2
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	22c0      	movs	r2, #192	; 0xc0
 80002ee:	0092      	lsls	r2, r2, #2
 80002f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002f2:	0021      	movs	r1, r4
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2202      	movs	r2, #2
 80002f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2203      	movs	r2, #3
 8000304:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2204      	movs	r2, #4
 800030a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800030c:	187b      	adds	r3, r7, r1
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <HAL_CAN_MspInit+0xa8>)
 8000310:	0019      	movs	r1, r3
 8000312:	0010      	movs	r0, r2
 8000314:	f001 f9c8 	bl	80016a8 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000318:	2200      	movs	r2, #0
 800031a:	2100      	movs	r1, #0
 800031c:	201e      	movs	r0, #30
 800031e:	f001 f93f 	bl	80015a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000322:	201e      	movs	r0, #30
 8000324:	f001 f951 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	b00b      	add	sp, #44	; 0x2c
 800032e:	bd90      	pop	{r4, r7, pc}
 8000330:	40006400 	.word	0x40006400
 8000334:	40021000 	.word	0x40021000
 8000338:	48000400 	.word	0x48000400

0800033c <CAN_Init>:
          Filter configured in accordance with E&S Team Project Guidlines.
 *
 * @retval None.
 **/
void CAN_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	sFilterConfig.FilterBank = 1;
 8000340:	4b27      	ldr	r3, [pc, #156]	; (80003e0 <CAN_Init+0xa4>)
 8000342:	2201      	movs	r2, #1
 8000344:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000346:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <CAN_Init+0xa4>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800034c:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <CAN_Init+0xa4>)
 800034e:	2201      	movs	r2, #1
 8000350:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = Rx_ID << 5;
 8000352:	4b23      	ldr	r3, [pc, #140]	; (80003e0 <CAN_Init+0xa4>)
 8000354:	229e      	movs	r2, #158	; 0x9e
 8000356:	0112      	lsls	r2, r2, #4
 8000358:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800035a:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <CAN_Init+0xa4>)
 800035c:	2200      	movs	r2, #0
 800035e:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF << 5;
 8000360:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <CAN_Init+0xa4>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <CAN_Init+0xa8>)
 8000364:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000366:	4b1e      	ldr	r3, [pc, #120]	; (80003e0 <CAN_Init+0xa4>)
 8000368:	2200      	movs	r2, #0
 800036a:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800036c:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <CAN_Init+0xa4>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000372:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <CAN_Init+0xa4>)
 8000374:	2201      	movs	r2, #1
 8000376:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000378:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <CAN_Init+0xa4>)
 800037a:	220e      	movs	r2, #14
 800037c:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800037e:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <CAN_Init+0xa4>)
 8000380:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <CAN_Init+0xac>)
 8000382:	0011      	movs	r1, r2
 8000384:	0018      	movs	r0, r3
 8000386:	f000 fce9 	bl	8000d5c <HAL_CAN_ConfigFilter>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <CAN_Init+0x56>
	{
		/* Filter configuration Error */
		Error_Handler();
 800038e:	f000 f9da 	bl	8000746 <Error_Handler>
	}
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <CAN_Init+0xac>)
 8000394:	0018      	movs	r0, r3
 8000396:	f000 fdd3 	bl	8000f40 <HAL_CAN_Start>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <CAN_Init+0x66>
	{
		/* Start Error */
		Error_Handler();
 800039e:	f000 f9d2 	bl	8000746 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <CAN_Init+0xac>)
 80003a4:	2103      	movs	r1, #3
 80003a6:	0018      	movs	r0, r3
 80003a8:	f000 fe10 	bl	8000fcc <HAL_CAN_ActivateNotification>
 80003ac:	1e03      	subs	r3, r0, #0
 80003ae:	d001      	beq.n	80003b4 <CAN_Init+0x78>
	{
		/* Notification Error */
		Error_Handler();
 80003b0:	f000 f9c9 	bl	8000746 <Error_Handler>
	}

	TxHeader.StdId = Tx_ID;
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <CAN_Init+0xb0>)
 80003b6:	224f      	movs	r2, #79	; 0x4f
 80003b8:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x0000;
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <CAN_Init+0xb0>)
 80003bc:	2200      	movs	r2, #0
 80003be:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <CAN_Init+0xb0>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <CAN_Init+0xb0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <CAN_Init+0xb0>)
 80003ce:	2208      	movs	r2, #8
 80003d0:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <CAN_Init+0xb0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	751a      	strb	r2, [r3, #20]
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	20000050 	.word	0x20000050
 80003e4:	001fffe0 	.word	0x001fffe0
 80003e8:	20000028 	.word	0x20000028
 80003ec:	20000078 	.word	0x20000078

080003f0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 *         the configuration information for the specified CAN.
 *
 * @retval None 
 **/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(PCB_LED_GREEN_GPIO_Port, PCB_LED_GREEN_Pin);
 80003f8:	2380      	movs	r3, #128	; 0x80
 80003fa:	011b      	lsls	r3, r3, #4
 80003fc:	4a04      	ldr	r2, [pc, #16]	; (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80003fe:	0019      	movs	r1, r3
 8000400:	0010      	movs	r0, r2
 8000402:	f001 fad6 	bl	80019b2 <HAL_GPIO_TogglePin>
	//HAL_Delay(100);

	//CAN_Receive(hcan, &RxHeader, RxData);
	//CAN_On_Receive(RxData);
}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b002      	add	sp, #8
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	48000400 	.word	0x48000400

08000414 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b089      	sub	sp, #36	; 0x24
 8000418:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041a:	240c      	movs	r4, #12
 800041c:	193b      	adds	r3, r7, r4
 800041e:	0018      	movs	r0, r3
 8000420:	2314      	movs	r3, #20
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f003 fd89 	bl	8003f3c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800042a:	4b34      	ldr	r3, [pc, #208]	; (80004fc <MX_GPIO_Init+0xe8>)
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	4b33      	ldr	r3, [pc, #204]	; (80004fc <MX_GPIO_Init+0xe8>)
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	03c9      	lsls	r1, r1, #15
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]
 8000438:	4b30      	ldr	r3, [pc, #192]	; (80004fc <MX_GPIO_Init+0xe8>)
 800043a:	695a      	ldr	r2, [r3, #20]
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	03db      	lsls	r3, r3, #15
 8000440:	4013      	ands	r3, r2
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b2d      	ldr	r3, [pc, #180]	; (80004fc <MX_GPIO_Init+0xe8>)
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	4b2c      	ldr	r3, [pc, #176]	; (80004fc <MX_GPIO_Init+0xe8>)
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	0289      	lsls	r1, r1, #10
 8000450:	430a      	orrs	r2, r1
 8000452:	615a      	str	r2, [r3, #20]
 8000454:	4b29      	ldr	r3, [pc, #164]	; (80004fc <MX_GPIO_Init+0xe8>)
 8000456:	695a      	ldr	r2, [r3, #20]
 8000458:	2380      	movs	r3, #128	; 0x80
 800045a:	029b      	lsls	r3, r3, #10
 800045c:	4013      	ands	r3, r2
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000462:	4b26      	ldr	r3, [pc, #152]	; (80004fc <MX_GPIO_Init+0xe8>)
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	4b25      	ldr	r3, [pc, #148]	; (80004fc <MX_GPIO_Init+0xe8>)
 8000468:	2180      	movs	r1, #128	; 0x80
 800046a:	02c9      	lsls	r1, r1, #11
 800046c:	430a      	orrs	r2, r1
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	4b22      	ldr	r3, [pc, #136]	; (80004fc <MX_GPIO_Init+0xe8>)
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	02db      	lsls	r3, r3, #11
 8000478:	4013      	ands	r3, r2
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PCB_LED_RED_Pin|PCB_LED_GREEN_Pin|LED_MF_GREEN_Pin|LED_MF_RED_Pin
 800047e:	23fc      	movs	r3, #252	; 0xfc
 8000480:	021b      	lsls	r3, r3, #8
 8000482:	481f      	ldr	r0, [pc, #124]	; (8000500 <MX_GPIO_Init+0xec>)
 8000484:	2200      	movs	r2, #0
 8000486:	0019      	movs	r1, r3
 8000488:	f001 fa76 	bl	8001978 <HAL_GPIO_WritePin>
                          |LED_MDF_GREEN_Pin|LED_MDF_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 800048c:	193b      	adds	r3, r7, r4
 800048e:	22ff      	movs	r2, #255	; 0xff
 8000490:	601a      	str	r2, [r3, #0]
                          |SW5_Pin|SW6_Pin|SW7_Pin|SW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049e:	193a      	adds	r2, r7, r4
 80004a0:	2390      	movs	r3, #144	; 0x90
 80004a2:	05db      	lsls	r3, r3, #23
 80004a4:	0011      	movs	r1, r2
 80004a6:	0018      	movs	r0, r3
 80004a8:	f001 f8fe 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW9_Pin|SW10_Pin;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2203      	movs	r2, #3
 80004b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2200      	movs	r2, #0
 80004b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	4a0f      	ldr	r2, [pc, #60]	; (8000500 <MX_GPIO_Init+0xec>)
 80004c2:	0019      	movs	r1, r3
 80004c4:	0010      	movs	r0, r2
 80004c6:	f001 f8ef 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = PCB_LED_RED_Pin|PCB_LED_GREEN_Pin|LED_MF_GREEN_Pin|LED_MF_RED_Pin
 80004ca:	0021      	movs	r1, r4
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	22fc      	movs	r2, #252	; 0xfc
 80004d0:	0212      	lsls	r2, r2, #8
 80004d2:	601a      	str	r2, [r3, #0]
                          |LED_MDF_GREEN_Pin|LED_MDF_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d4:	187b      	adds	r3, r7, r1
 80004d6:	2201      	movs	r2, #1
 80004d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	187b      	adds	r3, r7, r1
 80004dc:	2200      	movs	r2, #0
 80004de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <MX_GPIO_Init+0xec>)
 80004ea:	0019      	movs	r1, r3
 80004ec:	0010      	movs	r0, r2
 80004ee:	f001 f8db 	bl	80016a8 <HAL_GPIO_Init>

}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b009      	add	sp, #36	; 0x24
 80004f8:	bd90      	pop	{r4, r7, pc}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	40021000 	.word	0x40021000
 8000500:	48000400 	.word	0x48000400

08000504 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000508:	4b1b      	ldr	r3, [pc, #108]	; (8000578 <MX_I2C1_Init+0x74>)
 800050a:	4a1c      	ldr	r2, [pc, #112]	; (800057c <MX_I2C1_Init+0x78>)
 800050c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <MX_I2C1_Init+0x74>)
 8000510:	4a1b      	ldr	r2, [pc, #108]	; (8000580 <MX_I2C1_Init+0x7c>)
 8000512:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000514:	4b18      	ldr	r3, [pc, #96]	; (8000578 <MX_I2C1_Init+0x74>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800051a:	4b17      	ldr	r3, [pc, #92]	; (8000578 <MX_I2C1_Init+0x74>)
 800051c:	2201      	movs	r2, #1
 800051e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_I2C1_Init+0x74>)
 8000522:	2200      	movs	r2, #0
 8000524:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_I2C1_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_I2C1_Init+0x74>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000532:	4b11      	ldr	r3, [pc, #68]	; (8000578 <MX_I2C1_Init+0x74>)
 8000534:	2200      	movs	r2, #0
 8000536:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_I2C1_Init+0x74>)
 800053a:	2200      	movs	r2, #0
 800053c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <MX_I2C1_Init+0x74>)
 8000540:	0018      	movs	r0, r3
 8000542:	f001 fa51 	bl	80019e8 <HAL_I2C_Init>
 8000546:	1e03      	subs	r3, r0, #0
 8000548:	d001      	beq.n	800054e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800054a:	f000 f8fc 	bl	8000746 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <MX_I2C1_Init+0x74>)
 8000550:	2100      	movs	r1, #0
 8000552:	0018      	movs	r0, r3
 8000554:	f002 f8de 	bl	8002714 <HAL_I2CEx_ConfigAnalogFilter>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800055c:	f000 f8f3 	bl	8000746 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <MX_I2C1_Init+0x74>)
 8000562:	2100      	movs	r1, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f002 f921 	bl	80027ac <HAL_I2CEx_ConfigDigitalFilter>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800056e:	f000 f8ea 	bl	8000746 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000090 	.word	0x20000090
 800057c:	40005400 	.word	0x40005400
 8000580:	2000090e 	.word	0x2000090e

08000584 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b08b      	sub	sp, #44	; 0x2c
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	2414      	movs	r4, #20
 800058e:	193b      	adds	r3, r7, r4
 8000590:	0018      	movs	r0, r3
 8000592:	2314      	movs	r3, #20
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f003 fcd0 	bl	8003f3c <memset>
  if(i2cHandle->Instance==I2C1)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <HAL_I2C_MspInit+0xa4>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d13b      	bne.n	800061e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <HAL_I2C_MspInit+0xa8>)
 80005a8:	695a      	ldr	r2, [r3, #20]
 80005aa:	4b20      	ldr	r3, [pc, #128]	; (800062c <HAL_I2C_MspInit+0xa8>)
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	0289      	lsls	r1, r1, #10
 80005b0:	430a      	orrs	r2, r1
 80005b2:	615a      	str	r2, [r3, #20]
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <HAL_I2C_MspInit+0xa8>)
 80005b6:	695a      	ldr	r2, [r3, #20]
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	029b      	lsls	r3, r3, #10
 80005bc:	4013      	ands	r3, r2
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	22c0      	movs	r2, #192	; 0xc0
 80005c6:	00d2      	lsls	r2, r2, #3
 80005c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005ca:	0021      	movs	r1, r4
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2212      	movs	r2, #18
 80005d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2203      	movs	r2, #3
 80005dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2204      	movs	r2, #4
 80005e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	187a      	adds	r2, r7, r1
 80005e6:	2390      	movs	r3, #144	; 0x90
 80005e8:	05db      	lsls	r3, r3, #23
 80005ea:	0011      	movs	r1, r2
 80005ec:	0018      	movs	r0, r3
 80005ee:	f001 f85b 	bl	80016a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_I2C_MspInit+0xa8>)
 80005f4:	69da      	ldr	r2, [r3, #28]
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <HAL_I2C_MspInit+0xa8>)
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	0389      	lsls	r1, r1, #14
 80005fc:	430a      	orrs	r2, r1
 80005fe:	61da      	str	r2, [r3, #28]
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_I2C_MspInit+0xa8>)
 8000602:	69da      	ldr	r2, [r3, #28]
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	039b      	lsls	r3, r3, #14
 8000608:	4013      	ands	r3, r2
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	2017      	movs	r0, #23
 8000614:	f000 ffc4 	bl	80015a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000618:	2017      	movs	r0, #23
 800061a:	f000 ffd6 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b00b      	add	sp, #44	; 0x2c
 8000624:	bd90      	pop	{r4, r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	40005400 	.word	0x40005400
 800062c:	40021000 	.word	0x40021000

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fa0b 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f827 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f7ff fee9 	bl	8000414 <MX_GPIO_Init>
  MX_CAN_Init();
 8000642:	f7ff fded 	bl	8000220 <MX_CAN_Init>
  MX_I2C1_Init();
 8000646:	f7ff ff5d 	bl	8000504 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800064a:	f000 f941 	bl	80008d0 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 800064e:	f000 f8f1 	bl	8000834 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  CAN_Init();
 8000652:	f7ff fe73 	bl	800033c <CAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  for(uint8_t i = 0; i < 10; i++)
 8000656:	1dfb      	adds	r3, r7, #7
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
 800065c:	e00e      	b.n	800067c <main+0x4c>
  {
	  HAL_GPIO_TogglePin(PCB_LED_RED_GPIO_Port, PCB_LED_RED_Pin);
 800065e:	2380      	movs	r3, #128	; 0x80
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	4a09      	ldr	r2, [pc, #36]	; (8000688 <main+0x58>)
 8000664:	0019      	movs	r1, r3
 8000666:	0010      	movs	r0, r2
 8000668:	f001 f9a3 	bl	80019b2 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 800066c:	2032      	movs	r0, #50	; 0x32
 800066e:	f000 fa53 	bl	8000b18 <HAL_Delay>
  for(uint8_t i = 0; i < 10; i++)
 8000672:	1dfb      	adds	r3, r7, #7
 8000674:	781a      	ldrb	r2, [r3, #0]
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	3201      	adds	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b09      	cmp	r3, #9
 8000682:	d9ec      	bls.n	800065e <main+0x2e>
  //SLAVE MUSI MIEĆ ZASILANIE W MOMENCIE WYWO�?ANIA TEJ FUNKCJI, INACZEJ PROGRAM PÓJDZIE DALEJ
  HAL_Delay(200);
  HAL_TIM_Base_Start_IT(&htim14);
*/

  while (1)
 8000684:	e7fe      	b.n	8000684 <main+0x54>
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	48000400 	.word	0x48000400

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b099      	sub	sp, #100	; 0x64
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	242c      	movs	r4, #44	; 0x2c
 8000694:	193b      	adds	r3, r7, r4
 8000696:	0018      	movs	r0, r3
 8000698:	2334      	movs	r3, #52	; 0x34
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f003 fc4d 	bl	8003f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a2:	231c      	movs	r3, #28
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	0018      	movs	r0, r3
 80006a8:	2310      	movs	r3, #16
 80006aa:	001a      	movs	r2, r3
 80006ac:	2100      	movs	r1, #0
 80006ae:	f003 fc45 	bl	8003f3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	0018      	movs	r0, r3
 80006b6:	2318      	movs	r3, #24
 80006b8:	001a      	movs	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	f003 fc3e 	bl	8003f3c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006c0:	0021      	movs	r1, r4
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2203      	movs	r2, #3
 80006c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2201      	movs	r2, #1
 80006cc:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2201      	movs	r2, #1
 80006d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2210      	movs	r2, #16
 80006d8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	0018      	movs	r0, r3
 80006e4:	f002 f8ae 	bl	8002844 <HAL_RCC_OscConfig>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80006ec:	f000 f82b 	bl	8000746 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	211c      	movs	r1, #28
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2207      	movs	r2, #7
 80006f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2201      	movs	r2, #1
 80006fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2100      	movs	r1, #0
 800070e:	0018      	movs	r0, r3
 8000710:	f002 fc1e 	bl	8002f50 <HAL_RCC_ClockConfig>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000718:	f000 f815 	bl	8000746 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2221      	movs	r2, #33	; 0x21
 8000720:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	0018      	movs	r0, r3
 8000732:	f002 fd89 	bl	8003248 <HAL_RCCEx_PeriphCLKConfig>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800073a:	f000 f804 	bl	8000746 <Error_Handler>
  }
}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b019      	add	sp, #100	; 0x64
 8000744:	bd90      	pop	{r4, r7, pc}

08000746 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074a:	b672      	cpsid	i
}
 800074c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074e:	e7fe      	b.n	800074e <Error_Handler+0x8>

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_MspInit+0x44>)
 8000758:	699a      	ldr	r2, [r3, #24]
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <HAL_MspInit+0x44>)
 800075c:	2101      	movs	r1, #1
 800075e:	430a      	orrs	r2, r1
 8000760:	619a      	str	r2, [r3, #24]
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_MspInit+0x44>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	2201      	movs	r2, #1
 8000768:	4013      	ands	r3, r2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <HAL_MspInit+0x44>)
 8000770:	69da      	ldr	r2, [r3, #28]
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_MspInit+0x44>)
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0549      	lsls	r1, r1, #21
 8000778:	430a      	orrs	r2, r1
 800077a:	61da      	str	r2, [r3, #28]
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_MspInit+0x44>)
 800077e:	69da      	ldr	r2, [r3, #28]
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	055b      	lsls	r3, r3, #21
 8000784:	4013      	ands	r3, r2
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	40021000 	.word	0x40021000

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800079c:	e7fe      	b.n	800079c <NMI_Handler+0x4>

0800079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007bc:	f000 f990 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <TIM14_IRQHandler+0x14>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f002 fe78 	bl	80034c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	200000dc 	.word	0x200000dc

080007e0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <I2C1_IRQHandler+0x2c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	699a      	ldr	r2, [r3, #24]
 80007ea:	23e0      	movs	r3, #224	; 0xe0
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	4013      	ands	r3, r2
 80007f0:	d004      	beq.n	80007fc <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <I2C1_IRQHandler+0x2c>)
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 f9a7 	bl	8001b48 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80007fa:	e003      	b.n	8000804 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <I2C1_IRQHandler+0x2c>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f001 f988 	bl	8001b14 <HAL_I2C_EV_IRQHandler>
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	20000090 	.word	0x20000090

08000810 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <CEC_CAN_IRQHandler+0x14>)
 8000816:	0018      	movs	r0, r3
 8000818:	f000 fc02 	bl	8001020 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	20000028 	.word	0x20000028

08000828 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_TIM14_Init+0x40>)
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <MX_TIM14_Init+0x44>)
 800083c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 7999;
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_TIM14_Init+0x40>)
 8000840:	4a0e      	ldr	r2, [pc, #56]	; (800087c <MX_TIM14_Init+0x48>)
 8000842:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_TIM14_Init+0x40>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_TIM14_Init+0x40>)
 800084c:	22fa      	movs	r2, #250	; 0xfa
 800084e:	0092      	lsls	r2, r2, #2
 8000850:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_TIM14_Init+0x40>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_TIM14_Init+0x40>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <MX_TIM14_Init+0x40>)
 8000860:	0018      	movs	r0, r3
 8000862:	f002 fddf 	bl	8003424 <HAL_TIM_Base_Init>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800086a:	f7ff ff6c 	bl	8000746 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000dc 	.word	0x200000dc
 8000878:	40002000 	.word	0x40002000
 800087c:	00001f3f 	.word	0x00001f3f

08000880 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <HAL_TIM_Base_MspInit+0x48>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d115      	bne.n	80008be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_TIM_Base_MspInit+0x4c>)
 8000894:	69da      	ldr	r2, [r3, #28]
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <HAL_TIM_Base_MspInit+0x4c>)
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	0049      	lsls	r1, r1, #1
 800089c:	430a      	orrs	r2, r1
 800089e:	61da      	str	r2, [r3, #28]
 80008a0:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <HAL_TIM_Base_MspInit+0x4c>)
 80008a2:	69da      	ldr	r2, [r3, #28]
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4013      	ands	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	2013      	movs	r0, #19
 80008b4:	f000 fe74 	bl	80015a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80008b8:	2013      	movs	r0, #19
 80008ba:	f000 fe86 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b004      	add	sp, #16
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	40002000 	.word	0x40002000
 80008cc:	40021000 	.word	0x40021000

080008d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_USART1_UART_Init+0x58>)
 80008d6:	4a15      	ldr	r2, [pc, #84]	; (800092c <MX_USART1_UART_Init+0x5c>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_USART1_UART_Init+0x58>)
 80008dc:	2296      	movs	r2, #150	; 0x96
 80008de:	0212      	lsls	r2, r2, #8
 80008e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_USART1_UART_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_USART1_UART_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_USART1_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <MX_USART1_UART_Init+0x58>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <MX_USART1_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b09      	ldr	r3, [pc, #36]	; (8000928 <MX_USART1_UART_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <MX_USART1_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_USART1_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <MX_USART1_UART_Init+0x58>)
 8000914:	0018      	movs	r0, r3
 8000916:	f002 ff99 	bl	800384c <HAL_UART_Init>
 800091a:	1e03      	subs	r3, r0, #0
 800091c:	d001      	beq.n	8000922 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800091e:	f7ff ff12 	bl	8000746 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000124 	.word	0x20000124
 800092c:	40013800 	.word	0x40013800

08000930 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b08b      	sub	sp, #44	; 0x2c
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	2414      	movs	r4, #20
 800093a:	193b      	adds	r3, r7, r4
 800093c:	0018      	movs	r0, r3
 800093e:	2314      	movs	r3, #20
 8000940:	001a      	movs	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f003 fafa 	bl	8003f3c <memset>
  if(uartHandle->Instance==USART1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <HAL_UART_MspInit+0x90>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d131      	bne.n	80009b6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_UART_MspInit+0x94>)
 8000954:	699a      	ldr	r2, [r3, #24]
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <HAL_UART_MspInit+0x94>)
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	01c9      	lsls	r1, r1, #7
 800095c:	430a      	orrs	r2, r1
 800095e:	619a      	str	r2, [r3, #24]
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_UART_MspInit+0x94>)
 8000962:	699a      	ldr	r2, [r3, #24]
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	01db      	lsls	r3, r3, #7
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_UART_MspInit+0x94>)
 8000970:	695a      	ldr	r2, [r3, #20]
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <HAL_UART_MspInit+0x94>)
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	02c9      	lsls	r1, r1, #11
 8000978:	430a      	orrs	r2, r1
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <HAL_UART_MspInit+0x94>)
 800097e:	695a      	ldr	r2, [r3, #20]
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	02db      	lsls	r3, r3, #11
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800098a:	0021      	movs	r1, r4
 800098c:	187b      	adds	r3, r7, r1
 800098e:	22c0      	movs	r2, #192	; 0xc0
 8000990:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2202      	movs	r2, #2
 8000996:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2203      	movs	r2, #3
 80009a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <HAL_UART_MspInit+0x98>)
 80009ae:	0019      	movs	r1, r3
 80009b0:	0010      	movs	r0, r2
 80009b2:	f000 fe79 	bl	80016a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	b00b      	add	sp, #44	; 0x2c
 80009bc:	bd90      	pop	{r4, r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	40013800 	.word	0x40013800
 80009c4:	40021000 	.word	0x40021000
 80009c8:	48000400 	.word	0x48000400

080009cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009cc:	4813      	ldr	r0, [pc, #76]	; (8000a1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ce:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80009d0:	4813      	ldr	r0, [pc, #76]	; (8000a20 <LoopForever+0x6>)
    LDR R1, [R0]
 80009d2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80009d4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80009d6:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <LoopForever+0xa>)
    CMP R1, R2
 80009d8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80009da:	d105      	bne.n	80009e8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80009de:	4913      	ldr	r1, [pc, #76]	; (8000a2c <LoopForever+0x12>)
    STR R1, [R0]
 80009e0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80009e2:	4813      	ldr	r0, [pc, #76]	; (8000a30 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80009e4:	4913      	ldr	r1, [pc, #76]	; (8000a34 <LoopForever+0x1a>)
    STR R1, [R0]
 80009e6:	6001      	str	r1, [r0, #0]

080009e8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	4813      	ldr	r0, [pc, #76]	; (8000a38 <LoopForever+0x1e>)
  ldr r1, =_edata
 80009ea:	4914      	ldr	r1, [pc, #80]	; (8000a3c <LoopForever+0x22>)
  ldr r2, =_sidata
 80009ec:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <LoopForever+0x26>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a11      	ldr	r2, [pc, #68]	; (8000a44 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000a00:	4c11      	ldr	r4, [pc, #68]	; (8000a48 <LoopForever+0x2e>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a0e:	f7ff ff0b 	bl	8000828 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a12:	f003 fa6f 	bl	8003ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a16:	f7ff fe0b 	bl	8000630 <main>

08000a1a <LoopForever>:

LoopForever:
    b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
  ldr   r0, =_estack
 8000a1c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000a20:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a24:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000a28:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000a2c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a30:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a34:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a40:	08003fa4 	.word	0x08003fa4
  ldr r2, =_sbss
 8000a44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a48:	200001ac 	.word	0x200001ac

08000a4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC1_IRQHandler>
	...

08000a50 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <HAL_Init+0x24>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_Init+0x24>)
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f809 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a66:	f7ff fe73 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_InitTick+0x5c>)
 8000a82:	681c      	ldr	r4, [r3, #0]
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_InitTick+0x60>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	0019      	movs	r1, r3
 8000a8a:	23fa      	movs	r3, #250	; 0xfa
 8000a8c:	0098      	lsls	r0, r3, #2
 8000a8e:	f7ff fb3b 	bl	8000108 <__udivsi3>
 8000a92:	0003      	movs	r3, r0
 8000a94:	0019      	movs	r1, r3
 8000a96:	0020      	movs	r0, r4
 8000a98:	f7ff fb36 	bl	8000108 <__udivsi3>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 fda3 	bl	80015ea <HAL_SYSTICK_Config>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e00f      	b.n	8000acc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d80b      	bhi.n	8000aca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	425b      	negs	r3, r3
 8000ab8:	2200      	movs	r2, #0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fd70 	bl	80015a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_InitTick+0x64>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b003      	add	sp, #12
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x1c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	001a      	movs	r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x20>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	18d2      	adds	r2, r2, r3
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_IncTick+0x20>)
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	20000008 	.word	0x20000008
 8000b00:	200001a8 	.word	0x200001a8

08000b04 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <HAL_GetTick+0x10>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	200001a8 	.word	0x200001a8

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff fff0 	bl	8000b04 <HAL_GetTick>
 8000b24:	0003      	movs	r3, r0
 8000b26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	001a      	movs	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	189b      	adds	r3, r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	f7ff ffe0 	bl	8000b04 <HAL_GetTick>
 8000b44:	0002      	movs	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b004      	add	sp, #16
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	20000008 	.word	0x20000008

08000b60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e0f0      	b.n	8000d54 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2220      	movs	r2, #32
 8000b76:	5c9b      	ldrb	r3, [r3, r2]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d103      	bne.n	8000b86 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff fb85 	bl	8000290 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2101      	movs	r1, #1
 8000b92:	430a      	orrs	r2, r1
 8000b94:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b96:	f7ff ffb5 	bl	8000b04 <HAL_GetTick>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b9e:	e013      	b.n	8000bc8 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ba0:	f7ff ffb0 	bl	8000b04 <HAL_GetTick>
 8000ba4:	0002      	movs	r2, r0
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	2b0a      	cmp	r3, #10
 8000bac:	d90c      	bls.n	8000bc8 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb2:	2280      	movs	r2, #128	; 0x80
 8000bb4:	0292      	lsls	r2, r2, #10
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2220      	movs	r2, #32
 8000bc0:	2105      	movs	r1, #5
 8000bc2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e0c5      	b.n	8000d54 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	d0e5      	beq.n	8000ba0 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2102      	movs	r1, #2
 8000be0:	438a      	bics	r2, r1
 8000be2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000be4:	f7ff ff8e 	bl	8000b04 <HAL_GetTick>
 8000be8:	0003      	movs	r3, r0
 8000bea:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bec:	e013      	b.n	8000c16 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bee:	f7ff ff89 	bl	8000b04 <HAL_GetTick>
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b0a      	cmp	r3, #10
 8000bfa:	d90c      	bls.n	8000c16 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	0292      	lsls	r2, r2, #10
 8000c04:	431a      	orrs	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	2105      	movs	r1, #5
 8000c10:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e09e      	b.n	8000d54 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	4013      	ands	r3, r2
 8000c20:	d1e5      	bne.n	8000bee <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7e1b      	ldrb	r3, [r3, #24]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d108      	bne.n	8000c3c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2180      	movs	r1, #128	; 0x80
 8000c36:	430a      	orrs	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	e007      	b.n	8000c4c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2180      	movs	r1, #128	; 0x80
 8000c48:	438a      	bics	r2, r1
 8000c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7e5b      	ldrb	r3, [r3, #25]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d108      	bne.n	8000c66 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2140      	movs	r1, #64	; 0x40
 8000c60:	430a      	orrs	r2, r1
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	e007      	b.n	8000c76 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2140      	movs	r1, #64	; 0x40
 8000c72:	438a      	bics	r2, r1
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7e9b      	ldrb	r3, [r3, #26]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d108      	bne.n	8000c90 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2120      	movs	r1, #32
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	e007      	b.n	8000ca0 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2120      	movs	r1, #32
 8000c9c:	438a      	bics	r2, r1
 8000c9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	7edb      	ldrb	r3, [r3, #27]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d108      	bne.n	8000cba <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2110      	movs	r1, #16
 8000cb4:	438a      	bics	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	e007      	b.n	8000cca <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	7f1b      	ldrb	r3, [r3, #28]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d108      	bne.n	8000ce4 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2108      	movs	r1, #8
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	e007      	b.n	8000cf4 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2108      	movs	r1, #8
 8000cf0:	438a      	bics	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7f5b      	ldrb	r3, [r3, #29]
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d108      	bne.n	8000d0e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2104      	movs	r1, #4
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	e007      	b.n	8000d1e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2104      	movs	r1, #4
 8000d1a:	438a      	bics	r2, r1
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	431a      	orrs	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	431a      	orrs	r2, r3
 8000d34:	0011      	movs	r1, r2
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	1e5a      	subs	r2, r3, #1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	430a      	orrs	r2, r1
 8000d42:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	2101      	movs	r1, #1
 8000d50:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	0018      	movs	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b004      	add	sp, #16
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d6c:	2013      	movs	r0, #19
 8000d6e:	183b      	adds	r3, r7, r0
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	2120      	movs	r1, #32
 8000d74:	5c52      	ldrb	r2, [r2, r1]
 8000d76:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d78:	0002      	movs	r2, r0
 8000d7a:	18bb      	adds	r3, r7, r2
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d004      	beq.n	8000d8c <HAL_CAN_ConfigFilter+0x30>
 8000d82:	18bb      	adds	r3, r7, r2
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d000      	beq.n	8000d8c <HAL_CAN_ConfigFilter+0x30>
 8000d8a:	e0cd      	b.n	8000f28 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	58d3      	ldr	r3, [r2, r3]
 8000d94:	2201      	movs	r2, #1
 8000d96:	431a      	orrs	r2, r3
 8000d98:	0011      	movs	r1, r2
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	221f      	movs	r2, #31
 8000da8:	4013      	ands	r3, r2
 8000daa:	2201      	movs	r2, #1
 8000dac:	409a      	lsls	r2, r3
 8000dae:	0013      	movs	r3, r2
 8000db0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	2387      	movs	r3, #135	; 0x87
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	58d3      	ldr	r3, [r2, r3]
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	43d2      	mvns	r2, r2
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	2387      	movs	r3, #135	; 0x87
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d129      	bne.n	8000e26 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	2383      	movs	r3, #131	; 0x83
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	58d3      	ldr	r3, [r2, r3]
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	43d2      	mvns	r2, r2
 8000dde:	401a      	ands	r2, r3
 8000de0:	0011      	movs	r1, r2
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	2383      	movs	r3, #131	; 0x83
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	041b      	lsls	r3, r3, #16
 8000df6:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dfc:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3248      	adds	r2, #72	; 0x48
 8000e02:	00d2      	lsls	r2, r2, #3
 8000e04:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	041b      	lsls	r3, r3, #16
 8000e12:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e18:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e1a:	6979      	ldr	r1, [r7, #20]
 8000e1c:	3348      	adds	r3, #72	; 0x48
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	18cb      	adds	r3, r1, r3
 8000e22:	3304      	adds	r3, #4
 8000e24:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d128      	bne.n	8000e80 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	2383      	movs	r3, #131	; 0x83
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	58d2      	ldr	r2, [r2, r3]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	2383      	movs	r3, #131	; 0x83
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	041b      	lsls	r3, r3, #16
 8000e50:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e56:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	3248      	adds	r2, #72	; 0x48
 8000e5c:	00d2      	lsls	r2, r2, #3
 8000e5e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	041b      	lsls	r3, r3, #16
 8000e6c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e72:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e74:	6979      	ldr	r1, [r7, #20]
 8000e76:	3348      	adds	r3, #72	; 0x48
 8000e78:	00db      	lsls	r3, r3, #3
 8000e7a:	18cb      	adds	r3, r1, r3
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10c      	bne.n	8000ea2 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	2381      	movs	r3, #129	; 0x81
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	58d3      	ldr	r3, [r2, r3]
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	43d2      	mvns	r2, r2
 8000e94:	401a      	ands	r2, r3
 8000e96:	0011      	movs	r1, r2
 8000e98:	697a      	ldr	r2, [r7, #20]
 8000e9a:	2381      	movs	r3, #129	; 0x81
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	50d1      	str	r1, [r2, r3]
 8000ea0:	e00a      	b.n	8000eb8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	2381      	movs	r3, #129	; 0x81
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	58d2      	ldr	r2, [r2, r3]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	0011      	movs	r1, r2
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	2381      	movs	r3, #129	; 0x81
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10c      	bne.n	8000eda <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	2385      	movs	r3, #133	; 0x85
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	58d3      	ldr	r3, [r2, r3]
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	43d2      	mvns	r2, r2
 8000ecc:	401a      	ands	r2, r3
 8000ece:	0011      	movs	r1, r2
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	2385      	movs	r3, #133	; 0x85
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	50d1      	str	r1, [r2, r3]
 8000ed8:	e00a      	b.n	8000ef0 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	2385      	movs	r3, #133	; 0x85
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	58d2      	ldr	r2, [r2, r3]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	2385      	movs	r3, #133	; 0x85
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d10a      	bne.n	8000f0e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	2387      	movs	r3, #135	; 0x87
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	58d2      	ldr	r2, [r2, r3]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	431a      	orrs	r2, r3
 8000f04:	0011      	movs	r1, r2
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	2387      	movs	r3, #135	; 0x87
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f0e:	697a      	ldr	r2, [r7, #20]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	58d3      	ldr	r3, [r2, r3]
 8000f16:	2201      	movs	r2, #1
 8000f18:	4393      	bics	r3, r2
 8000f1a:	0019      	movs	r1, r3
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	e007      	b.n	8000f38 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	02d2      	lsls	r2, r2, #11
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
  }
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b006      	add	sp, #24
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2220      	movs	r2, #32
 8000f4c:	5c9b      	ldrb	r3, [r3, r2]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d12f      	bne.n	8000fb4 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2220      	movs	r2, #32
 8000f58:	2102      	movs	r1, #2
 8000f5a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2101      	movs	r1, #1
 8000f68:	438a      	bics	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f6c:	f7ff fdca 	bl	8000b04 <HAL_GetTick>
 8000f70:	0003      	movs	r3, r0
 8000f72:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f74:	e013      	b.n	8000f9e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f76:	f7ff fdc5 	bl	8000b04 <HAL_GetTick>
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b0a      	cmp	r3, #10
 8000f82:	d90c      	bls.n	8000f9e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	0292      	lsls	r2, r2, #10
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2220      	movs	r2, #32
 8000f96:	2105      	movs	r1, #5
 8000f98:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e012      	b.n	8000fc4 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d1e5      	bne.n	8000f76 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e007      	b.n	8000fc4 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb8:	2280      	movs	r2, #128	; 0x80
 8000fba:	0312      	lsls	r2, r2, #12
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
  }
}
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b004      	add	sp, #16
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	183b      	adds	r3, r7, r0
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	2120      	movs	r1, #32
 8000fde:	5c52      	ldrb	r2, [r2, r1]
 8000fe0:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fe2:	0002      	movs	r2, r0
 8000fe4:	18bb      	adds	r3, r7, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d003      	beq.n	8000ff4 <HAL_CAN_ActivateNotification+0x28>
 8000fec:	18bb      	adds	r3, r7, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d109      	bne.n	8001008 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6959      	ldr	r1, [r3, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	430a      	orrs	r2, r1
 8001002:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001004:	2300      	movs	r3, #0
 8001006:	e007      	b.n	8001018 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	02d2      	lsls	r2, r2, #11
 8001010:	431a      	orrs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
  }
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	b004      	add	sp, #16
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	2201      	movs	r2, #1
 8001060:	4013      	ands	r3, r2
 8001062:	d100      	bne.n	8001066 <HAL_CAN_IRQHandler+0x46>
 8001064:	e084      	b.n	8001170 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2201      	movs	r2, #1
 800106a:	4013      	ands	r3, r2
 800106c:	d024      	beq.n	80010b8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2201      	movs	r2, #1
 8001074:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2202      	movs	r2, #2
 800107a:	4013      	ands	r3, r2
 800107c:	d004      	beq.n	8001088 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	0018      	movs	r0, r3
 8001082:	f000 f981 	bl	8001388 <HAL_CAN_TxMailbox0CompleteCallback>
 8001086:	e017      	b.n	80010b8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2204      	movs	r2, #4
 800108c:	4013      	ands	r3, r2
 800108e:	d005      	beq.n	800109c <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	2280      	movs	r2, #128	; 0x80
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	4313      	orrs	r3, r2
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
 800109a:	e00d      	b.n	80010b8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	2208      	movs	r2, #8
 80010a0:	4013      	ands	r3, r2
 80010a2:	d005      	beq.n	80010b0 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	0152      	lsls	r2, r2, #5
 80010aa:	4313      	orrs	r3, r2
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
 80010ae:	e003      	b.n	80010b8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	0018      	movs	r0, r3
 80010b4:	f000 f980 	bl	80013b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4013      	ands	r3, r2
 80010c0:	d028      	beq.n	8001114 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	0052      	lsls	r2, r2, #1
 80010ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4013      	ands	r3, r2
 80010d4:	d004      	beq.n	80010e0 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	0018      	movs	r0, r3
 80010da:	f000 f95d 	bl	8001398 <HAL_CAN_TxMailbox1CompleteCallback>
 80010de:	e019      	b.n	8001114 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4013      	ands	r3, r2
 80010e8:	d005      	beq.n	80010f6 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	0192      	lsls	r2, r2, #6
 80010f0:	4313      	orrs	r3, r2
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
 80010f4:	e00e      	b.n	8001114 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	011b      	lsls	r3, r3, #4
 80010fc:	4013      	ands	r3, r2
 80010fe:	d005      	beq.n	800110c <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	01d2      	lsls	r2, r2, #7
 8001106:	4313      	orrs	r3, r2
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
 800110a:	e003      	b.n	8001114 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	0018      	movs	r0, r3
 8001110:	f000 f95a 	bl	80013c8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	025b      	lsls	r3, r3, #9
 800111a:	4013      	ands	r3, r2
 800111c:	d028      	beq.n	8001170 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	0252      	lsls	r2, r2, #9
 8001126:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	029b      	lsls	r3, r3, #10
 800112e:	4013      	ands	r3, r2
 8001130:	d004      	beq.n	800113c <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	0018      	movs	r0, r3
 8001136:	f000 f937 	bl	80013a8 <HAL_CAN_TxMailbox2CompleteCallback>
 800113a:	e019      	b.n	8001170 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	02db      	lsls	r3, r3, #11
 8001142:	4013      	ands	r3, r2
 8001144:	d005      	beq.n	8001152 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	2280      	movs	r2, #128	; 0x80
 800114a:	0212      	lsls	r2, r2, #8
 800114c:	4313      	orrs	r3, r2
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
 8001150:	e00e      	b.n	8001170 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	031b      	lsls	r3, r3, #12
 8001158:	4013      	ands	r3, r2
 800115a:	d005      	beq.n	8001168 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115e:	2280      	movs	r2, #128	; 0x80
 8001160:	0252      	lsls	r2, r2, #9
 8001162:	4313      	orrs	r3, r2
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
 8001166:	e003      	b.n	8001170 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	0018      	movs	r0, r3
 800116c:	f000 f934 	bl	80013d8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001170:	6a3b      	ldr	r3, [r7, #32]
 8001172:	2208      	movs	r2, #8
 8001174:	4013      	ands	r3, r2
 8001176:	d00c      	beq.n	8001192 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	2210      	movs	r2, #16
 800117c:	4013      	ands	r3, r2
 800117e:	d008      	beq.n	8001192 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	4313      	orrs	r3, r2
 8001188:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2210      	movs	r2, #16
 8001190:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	2204      	movs	r2, #4
 8001196:	4013      	ands	r3, r2
 8001198:	d00b      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	2208      	movs	r2, #8
 800119e:	4013      	ands	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2208      	movs	r2, #8
 80011a8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	0018      	movs	r0, r3
 80011ae:	f000 f91b 	bl	80013e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011b2:	6a3b      	ldr	r3, [r7, #32]
 80011b4:	2202      	movs	r2, #2
 80011b6:	4013      	ands	r3, r2
 80011b8:	d009      	beq.n	80011ce <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2203      	movs	r2, #3
 80011c2:	4013      	ands	r3, r2
 80011c4:	d003      	beq.n	80011ce <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	0018      	movs	r0, r3
 80011ca:	f7ff f911 	bl	80003f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	2240      	movs	r2, #64	; 0x40
 80011d2:	4013      	ands	r3, r2
 80011d4:	d00c      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	2210      	movs	r2, #16
 80011da:	4013      	ands	r3, r2
 80011dc:	d008      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	00d2      	lsls	r2, r2, #3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2210      	movs	r2, #16
 80011ee:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	2220      	movs	r2, #32
 80011f4:	4013      	ands	r3, r2
 80011f6:	d00b      	beq.n	8001210 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	2208      	movs	r2, #8
 80011fc:	4013      	ands	r3, r2
 80011fe:	d007      	beq.n	8001210 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2208      	movs	r2, #8
 8001206:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	0018      	movs	r0, r3
 800120c:	f000 f8fc 	bl	8001408 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	2210      	movs	r2, #16
 8001214:	4013      	ands	r3, r2
 8001216:	d009      	beq.n	800122c <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	2203      	movs	r2, #3
 8001220:	4013      	ands	r3, r2
 8001222:	d003      	beq.n	800122c <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	0018      	movs	r0, r3
 8001228:	f000 f8e6 	bl	80013f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800122c:	6a3a      	ldr	r2, [r7, #32]
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	029b      	lsls	r3, r3, #10
 8001232:	4013      	ands	r3, r2
 8001234:	d00b      	beq.n	800124e <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	2210      	movs	r2, #16
 800123a:	4013      	ands	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2210      	movs	r2, #16
 8001244:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	0018      	movs	r0, r3
 800124a:	f000 f8e5 	bl	8001418 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800124e:	6a3a      	ldr	r2, [r7, #32]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	025b      	lsls	r3, r3, #9
 8001254:	4013      	ands	r3, r2
 8001256:	d00b      	beq.n	8001270 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	2208      	movs	r2, #8
 800125c:	4013      	ands	r3, r2
 800125e:	d007      	beq.n	8001270 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2208      	movs	r2, #8
 8001266:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	0018      	movs	r0, r3
 800126c:	f000 f8dc 	bl	8001428 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001270:	6a3a      	ldr	r2, [r7, #32]
 8001272:	2380      	movs	r3, #128	; 0x80
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	4013      	ands	r3, r2
 8001278:	d100      	bne.n	800127c <HAL_CAN_IRQHandler+0x25c>
 800127a:	e074      	b.n	8001366 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	2204      	movs	r2, #4
 8001280:	4013      	ands	r3, r2
 8001282:	d100      	bne.n	8001286 <HAL_CAN_IRQHandler+0x266>
 8001284:	e06b      	b.n	800135e <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001286:	6a3a      	ldr	r2, [r7, #32]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4013      	ands	r3, r2
 800128e:	d007      	beq.n	80012a0 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2201      	movs	r2, #1
 8001294:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001296:	d003      	beq.n	80012a0 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	2201      	movs	r2, #1
 800129c:	4313      	orrs	r3, r2
 800129e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012a0:	6a3a      	ldr	r2, [r7, #32]
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4013      	ands	r3, r2
 80012a8:	d007      	beq.n	80012ba <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2202      	movs	r2, #2
 80012ae:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012b0:	d003      	beq.n	80012ba <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	2202      	movs	r2, #2
 80012b6:	4313      	orrs	r3, r2
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012ba:	6a3a      	ldr	r2, [r7, #32]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	4013      	ands	r3, r2
 80012c2:	d007      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2204      	movs	r2, #4
 80012c8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012ca:	d003      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	2204      	movs	r2, #4
 80012d0:	4313      	orrs	r3, r2
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012d4:	6a3a      	ldr	r2, [r7, #32]
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	4013      	ands	r3, r2
 80012dc:	d03f      	beq.n	800135e <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2270      	movs	r2, #112	; 0x70
 80012e2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012e4:	d03b      	beq.n	800135e <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2270      	movs	r2, #112	; 0x70
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b60      	cmp	r3, #96	; 0x60
 80012ee:	d027      	beq.n	8001340 <HAL_CAN_IRQHandler+0x320>
 80012f0:	d82c      	bhi.n	800134c <HAL_CAN_IRQHandler+0x32c>
 80012f2:	2b50      	cmp	r3, #80	; 0x50
 80012f4:	d01f      	beq.n	8001336 <HAL_CAN_IRQHandler+0x316>
 80012f6:	d829      	bhi.n	800134c <HAL_CAN_IRQHandler+0x32c>
 80012f8:	2b40      	cmp	r3, #64	; 0x40
 80012fa:	d017      	beq.n	800132c <HAL_CAN_IRQHandler+0x30c>
 80012fc:	d826      	bhi.n	800134c <HAL_CAN_IRQHandler+0x32c>
 80012fe:	2b30      	cmp	r3, #48	; 0x30
 8001300:	d00f      	beq.n	8001322 <HAL_CAN_IRQHandler+0x302>
 8001302:	d823      	bhi.n	800134c <HAL_CAN_IRQHandler+0x32c>
 8001304:	2b10      	cmp	r3, #16
 8001306:	d002      	beq.n	800130e <HAL_CAN_IRQHandler+0x2ee>
 8001308:	2b20      	cmp	r3, #32
 800130a:	d005      	beq.n	8001318 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800130c:	e01e      	b.n	800134c <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	2208      	movs	r2, #8
 8001312:	4313      	orrs	r3, r2
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001316:	e01a      	b.n	800134e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	2210      	movs	r2, #16
 800131c:	4313      	orrs	r3, r2
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001320:	e015      	b.n	800134e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	2220      	movs	r2, #32
 8001326:	4313      	orrs	r3, r2
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800132a:	e010      	b.n	800134e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	2240      	movs	r2, #64	; 0x40
 8001330:	4313      	orrs	r3, r2
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001334:	e00b      	b.n	800134e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	4313      	orrs	r3, r2
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800133e:	e006      	b.n	800134e <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	2280      	movs	r2, #128	; 0x80
 8001344:	0052      	lsls	r2, r2, #1
 8001346:	4313      	orrs	r3, r2
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800134a:	e000      	b.n	800134e <HAL_CAN_IRQHandler+0x32e>
            break;
 800134c:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	699a      	ldr	r2, [r3, #24]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2170      	movs	r1, #112	; 0x70
 800135a:	438a      	bics	r2, r1
 800135c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2204      	movs	r2, #4
 8001364:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	0018      	movs	r0, r3
 800137c:	f000 f85c 	bl	8001438 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	b00a      	add	sp, #40	; 0x28
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b002      	add	sp, #8
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013b0:	46c0      	nop			; (mov r8, r8)
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b002      	add	sp, #8
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80013c0:	46c0      	nop			; (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b002      	add	sp, #8
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b002      	add	sp, #8
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b002      	add	sp, #8
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b002      	add	sp, #8
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001410:	46c0      	nop			; (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b002      	add	sp, #8
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	b002      	add	sp, #8
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46bd      	mov	sp, r7
 8001434:	b002      	add	sp, #8
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001440:	46c0      	nop			; (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}

08001448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	0002      	movs	r2, r0
 8001450:	1dfb      	adds	r3, r7, #7
 8001452:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001454:	1dfb      	adds	r3, r7, #7
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b7f      	cmp	r3, #127	; 0x7f
 800145a:	d809      	bhi.n	8001470 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145c:	1dfb      	adds	r3, r7, #7
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	001a      	movs	r2, r3
 8001462:	231f      	movs	r3, #31
 8001464:	401a      	ands	r2, r3
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__NVIC_EnableIRQ+0x30>)
 8001468:	2101      	movs	r1, #1
 800146a:	4091      	lsls	r1, r2
 800146c:	000a      	movs	r2, r1
 800146e:	601a      	str	r2, [r3, #0]
  }
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	b002      	add	sp, #8
 8001476:	bd80      	pop	{r7, pc}
 8001478:	e000e100 	.word	0xe000e100

0800147c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	0002      	movs	r2, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800148a:	1dfb      	adds	r3, r7, #7
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b7f      	cmp	r3, #127	; 0x7f
 8001490:	d828      	bhi.n	80014e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001492:	4a2f      	ldr	r2, [pc, #188]	; (8001550 <__NVIC_SetPriority+0xd4>)
 8001494:	1dfb      	adds	r3, r7, #7
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b25b      	sxtb	r3, r3
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	33c0      	adds	r3, #192	; 0xc0
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	589b      	ldr	r3, [r3, r2]
 80014a2:	1dfa      	adds	r2, r7, #7
 80014a4:	7812      	ldrb	r2, [r2, #0]
 80014a6:	0011      	movs	r1, r2
 80014a8:	2203      	movs	r2, #3
 80014aa:	400a      	ands	r2, r1
 80014ac:	00d2      	lsls	r2, r2, #3
 80014ae:	21ff      	movs	r1, #255	; 0xff
 80014b0:	4091      	lsls	r1, r2
 80014b2:	000a      	movs	r2, r1
 80014b4:	43d2      	mvns	r2, r2
 80014b6:	401a      	ands	r2, r3
 80014b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	019b      	lsls	r3, r3, #6
 80014be:	22ff      	movs	r2, #255	; 0xff
 80014c0:	401a      	ands	r2, r3
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	0018      	movs	r0, r3
 80014c8:	2303      	movs	r3, #3
 80014ca:	4003      	ands	r3, r0
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d0:	481f      	ldr	r0, [pc, #124]	; (8001550 <__NVIC_SetPriority+0xd4>)
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	b25b      	sxtb	r3, r3
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	430a      	orrs	r2, r1
 80014dc:	33c0      	adds	r3, #192	; 0xc0
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014e2:	e031      	b.n	8001548 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e4:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <__NVIC_SetPriority+0xd8>)
 80014e6:	1dfb      	adds	r3, r7, #7
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	0019      	movs	r1, r3
 80014ec:	230f      	movs	r3, #15
 80014ee:	400b      	ands	r3, r1
 80014f0:	3b08      	subs	r3, #8
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3306      	adds	r3, #6
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	18d3      	adds	r3, r2, r3
 80014fa:	3304      	adds	r3, #4
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	1dfa      	adds	r2, r7, #7
 8001500:	7812      	ldrb	r2, [r2, #0]
 8001502:	0011      	movs	r1, r2
 8001504:	2203      	movs	r2, #3
 8001506:	400a      	ands	r2, r1
 8001508:	00d2      	lsls	r2, r2, #3
 800150a:	21ff      	movs	r1, #255	; 0xff
 800150c:	4091      	lsls	r1, r2
 800150e:	000a      	movs	r2, r1
 8001510:	43d2      	mvns	r2, r2
 8001512:	401a      	ands	r2, r3
 8001514:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	019b      	lsls	r3, r3, #6
 800151a:	22ff      	movs	r2, #255	; 0xff
 800151c:	401a      	ands	r2, r3
 800151e:	1dfb      	adds	r3, r7, #7
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	0018      	movs	r0, r3
 8001524:	2303      	movs	r3, #3
 8001526:	4003      	ands	r3, r0
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800152c:	4809      	ldr	r0, [pc, #36]	; (8001554 <__NVIC_SetPriority+0xd8>)
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	001c      	movs	r4, r3
 8001534:	230f      	movs	r3, #15
 8001536:	4023      	ands	r3, r4
 8001538:	3b08      	subs	r3, #8
 800153a:	089b      	lsrs	r3, r3, #2
 800153c:	430a      	orrs	r2, r1
 800153e:	3306      	adds	r3, #6
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	18c3      	adds	r3, r0, r3
 8001544:	3304      	adds	r3, #4
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	b003      	add	sp, #12
 800154e:	bd90      	pop	{r4, r7, pc}
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	1e5a      	subs	r2, r3, #1
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	045b      	lsls	r3, r3, #17
 8001568:	429a      	cmp	r2, r3
 800156a:	d301      	bcc.n	8001570 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156c:	2301      	movs	r3, #1
 800156e:	e010      	b.n	8001592 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <SysTick_Config+0x44>)
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	3a01      	subs	r2, #1
 8001576:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001578:	2301      	movs	r3, #1
 800157a:	425b      	negs	r3, r3
 800157c:	2103      	movs	r1, #3
 800157e:	0018      	movs	r0, r3
 8001580:	f7ff ff7c 	bl	800147c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <SysTick_Config+0x44>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <SysTick_Config+0x44>)
 800158c:	2207      	movs	r2, #7
 800158e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001590:	2300      	movs	r3, #0
}
 8001592:	0018      	movs	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	b002      	add	sp, #8
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	e000e010 	.word	0xe000e010

080015a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	210f      	movs	r1, #15
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	1c02      	adds	r2, r0, #0
 80015b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	0011      	movs	r1, r2
 80015bc:	0018      	movs	r0, r3
 80015be:	f7ff ff5d 	bl	800147c <__NVIC_SetPriority>
}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b004      	add	sp, #16
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	0002      	movs	r2, r0
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d6:	1dfb      	adds	r3, r7, #7
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff ff33 	bl	8001448 <__NVIC_EnableIRQ>
}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b002      	add	sp, #8
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7ff ffaf 	bl	8001558 <SysTick_Config>
 80015fa:	0003      	movs	r3, r0
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b002      	add	sp, #8
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800160c:	210f      	movs	r1, #15
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2221      	movs	r2, #33	; 0x21
 8001618:	5c9b      	ldrb	r3, [r3, r2]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d006      	beq.n	800162e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2204      	movs	r2, #4
 8001624:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001626:	187b      	adds	r3, r7, r1
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]
 800162c:	e028      	b.n	8001680 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	210e      	movs	r1, #14
 800163a:	438a      	bics	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2101      	movs	r1, #1
 800164a:	438a      	bics	r2, r1
 800164c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001656:	2101      	movs	r1, #1
 8001658:	4091      	lsls	r1, r2
 800165a:	000a      	movs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2221      	movs	r2, #33	; 0x21
 8001662:	2101      	movs	r1, #1
 8001664:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2220      	movs	r2, #32
 800166a:	2100      	movs	r1, #0
 800166c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001672:	2b00      	cmp	r3, #0
 8001674:	d004      	beq.n	8001680 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	0010      	movs	r0, r2
 800167e:	4798      	blx	r3
    } 
  }
  return status;
 8001680:	230f      	movs	r3, #15
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	781b      	ldrb	r3, [r3, #0]
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b004      	add	sp, #16
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2221      	movs	r2, #33	; 0x21
 800169a:	5c9b      	ldrb	r3, [r3, r2]
 800169c:	b2db      	uxtb	r3, r3
}
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b002      	add	sp, #8
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b6:	e149      	b.n	800194c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	4091      	lsls	r1, r2
 80016c2:	000a      	movs	r2, r1
 80016c4:	4013      	ands	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d100      	bne.n	80016d0 <HAL_GPIO_Init+0x28>
 80016ce:	e13a      	b.n	8001946 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2203      	movs	r2, #3
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d005      	beq.n	80016e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2203      	movs	r2, #3
 80016e2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d130      	bne.n	800174a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	409a      	lsls	r2, r3
 80016f6:	0013      	movs	r3, r2
 80016f8:	43da      	mvns	r2, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	409a      	lsls	r2, r3
 800170a:	0013      	movs	r3, r2
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800171e:	2201      	movs	r2, #1
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	409a      	lsls	r2, r3
 8001724:	0013      	movs	r3, r2
 8001726:	43da      	mvns	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	2201      	movs	r2, #1
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
 800173c:	0013      	movs	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2203      	movs	r2, #3
 8001750:	4013      	ands	r3, r2
 8001752:	2b03      	cmp	r3, #3
 8001754:	d017      	beq.n	8001786 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	2203      	movs	r2, #3
 8001762:	409a      	lsls	r2, r3
 8001764:	0013      	movs	r3, r2
 8001766:	43da      	mvns	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	409a      	lsls	r2, r3
 8001778:	0013      	movs	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2203      	movs	r2, #3
 800178c:	4013      	ands	r3, r2
 800178e:	2b02      	cmp	r3, #2
 8001790:	d123      	bne.n	80017da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	08da      	lsrs	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3208      	adds	r2, #8
 800179a:	0092      	lsls	r2, r2, #2
 800179c:	58d3      	ldr	r3, [r2, r3]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2207      	movs	r2, #7
 80017a4:	4013      	ands	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	43da      	mvns	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	2107      	movs	r1, #7
 80017be:	400b      	ands	r3, r1
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	409a      	lsls	r2, r3
 80017c4:	0013      	movs	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	08da      	lsrs	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3208      	adds	r2, #8
 80017d4:	0092      	lsls	r2, r2, #2
 80017d6:	6939      	ldr	r1, [r7, #16]
 80017d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	409a      	lsls	r2, r3
 80017e8:	0013      	movs	r3, r2
 80017ea:	43da      	mvns	r2, r3
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2203      	movs	r2, #3
 80017f8:	401a      	ands	r2, r3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	409a      	lsls	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	23c0      	movs	r3, #192	; 0xc0
 8001814:	029b      	lsls	r3, r3, #10
 8001816:	4013      	ands	r3, r2
 8001818:	d100      	bne.n	800181c <HAL_GPIO_Init+0x174>
 800181a:	e094      	b.n	8001946 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181c:	4b51      	ldr	r3, [pc, #324]	; (8001964 <HAL_GPIO_Init+0x2bc>)
 800181e:	699a      	ldr	r2, [r3, #24]
 8001820:	4b50      	ldr	r3, [pc, #320]	; (8001964 <HAL_GPIO_Init+0x2bc>)
 8001822:	2101      	movs	r1, #1
 8001824:	430a      	orrs	r2, r1
 8001826:	619a      	str	r2, [r3, #24]
 8001828:	4b4e      	ldr	r3, [pc, #312]	; (8001964 <HAL_GPIO_Init+0x2bc>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	2201      	movs	r2, #1
 800182e:	4013      	ands	r3, r2
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001834:	4a4c      	ldr	r2, [pc, #304]	; (8001968 <HAL_GPIO_Init+0x2c0>)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	589b      	ldr	r3, [r3, r2]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2203      	movs	r2, #3
 8001846:	4013      	ands	r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	220f      	movs	r2, #15
 800184c:	409a      	lsls	r2, r3
 800184e:	0013      	movs	r3, r2
 8001850:	43da      	mvns	r2, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	2390      	movs	r3, #144	; 0x90
 800185c:	05db      	lsls	r3, r3, #23
 800185e:	429a      	cmp	r2, r3
 8001860:	d00d      	beq.n	800187e <HAL_GPIO_Init+0x1d6>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a41      	ldr	r2, [pc, #260]	; (800196c <HAL_GPIO_Init+0x2c4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d007      	beq.n	800187a <HAL_GPIO_Init+0x1d2>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a40      	ldr	r2, [pc, #256]	; (8001970 <HAL_GPIO_Init+0x2c8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d101      	bne.n	8001876 <HAL_GPIO_Init+0x1ce>
 8001872:	2302      	movs	r3, #2
 8001874:	e004      	b.n	8001880 <HAL_GPIO_Init+0x1d8>
 8001876:	2305      	movs	r3, #5
 8001878:	e002      	b.n	8001880 <HAL_GPIO_Init+0x1d8>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_GPIO_Init+0x1d8>
 800187e:	2300      	movs	r3, #0
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	2103      	movs	r1, #3
 8001884:	400a      	ands	r2, r1
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	4093      	lsls	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001890:	4935      	ldr	r1, [pc, #212]	; (8001968 <HAL_GPIO_Init+0x2c0>)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800189e:	4b35      	ldr	r3, [pc, #212]	; (8001974 <HAL_GPIO_Init+0x2cc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	43da      	mvns	r2, r3
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	025b      	lsls	r3, r3, #9
 80018b6:	4013      	ands	r3, r2
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018c2:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <HAL_GPIO_Init+0x2cc>)
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80018c8:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <HAL_GPIO_Init+0x2cc>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43da      	mvns	r2, r3
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	029b      	lsls	r3, r3, #10
 80018e0:	4013      	ands	r3, r2
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018ec:	4b21      	ldr	r3, [pc, #132]	; (8001974 <HAL_GPIO_Init+0x2cc>)
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <HAL_GPIO_Init+0x2cc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	43da      	mvns	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	035b      	lsls	r3, r3, #13
 800190a:	4013      	ands	r3, r2
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4313      	orrs	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <HAL_GPIO_Init+0x2cc>)
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_GPIO_Init+0x2cc>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43da      	mvns	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	039b      	lsls	r3, r3, #14
 8001934:	4013      	ands	r3, r2
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <HAL_GPIO_Init+0x2cc>)
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	40da      	lsrs	r2, r3
 8001954:	1e13      	subs	r3, r2, #0
 8001956:	d000      	beq.n	800195a <HAL_GPIO_Init+0x2b2>
 8001958:	e6ae      	b.n	80016b8 <HAL_GPIO_Init+0x10>
  } 
}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b006      	add	sp, #24
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000
 8001968:	40010000 	.word	0x40010000
 800196c:	48000400 	.word	0x48000400
 8001970:	48000800 	.word	0x48000800
 8001974:	40010400 	.word	0x40010400

08001978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	0008      	movs	r0, r1
 8001982:	0011      	movs	r1, r2
 8001984:	1cbb      	adds	r3, r7, #2
 8001986:	1c02      	adds	r2, r0, #0
 8001988:	801a      	strh	r2, [r3, #0]
 800198a:	1c7b      	adds	r3, r7, #1
 800198c:	1c0a      	adds	r2, r1, #0
 800198e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001990:	1c7b      	adds	r3, r7, #1
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d004      	beq.n	80019a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001998:	1cbb      	adds	r3, r7, #2
 800199a:	881a      	ldrh	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019a0:	e003      	b.n	80019aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019a2:	1cbb      	adds	r3, r7, #2
 80019a4:	881a      	ldrh	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b002      	add	sp, #8
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	000a      	movs	r2, r1
 80019bc:	1cbb      	adds	r3, r7, #2
 80019be:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019c6:	1cbb      	adds	r3, r7, #2
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	041a      	lsls	r2, r3, #16
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	1cb9      	adds	r1, r7, #2
 80019d6:	8809      	ldrh	r1, [r1, #0]
 80019d8:	400b      	ands	r3, r1
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	619a      	str	r2, [r3, #24]
}
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b004      	add	sp, #16
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e082      	b.n	8001b00 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2241      	movs	r2, #65	; 0x41
 80019fe:	5c9b      	ldrb	r3, [r3, r2]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d107      	bne.n	8001a16 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2240      	movs	r2, #64	; 0x40
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7fe fdb7 	bl	8000584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2241      	movs	r2, #65	; 0x41
 8001a1a:	2124      	movs	r1, #36	; 0x24
 8001a1c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2101      	movs	r1, #1
 8001a2a:	438a      	bics	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4934      	ldr	r1, [pc, #208]	; (8001b08 <HAL_I2C_Init+0x120>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4931      	ldr	r1, [pc, #196]	; (8001b0c <HAL_I2C_Init+0x124>)
 8001a48:	400a      	ands	r2, r1
 8001a4a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d108      	bne.n	8001a66 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	0209      	lsls	r1, r1, #8
 8001a60:	430a      	orrs	r2, r1
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	e007      	b.n	8001a76 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2184      	movs	r1, #132	; 0x84
 8001a70:	0209      	lsls	r1, r1, #8
 8001a72:	430a      	orrs	r2, r1
 8001a74:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d104      	bne.n	8001a88 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	491f      	ldr	r1, [pc, #124]	; (8001b10 <HAL_I2C_Init+0x128>)
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	491a      	ldr	r1, [pc, #104]	; (8001b0c <HAL_I2C_Init+0x124>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69d9      	ldr	r1, [r3, #28]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1a      	ldr	r2, [r3, #32]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2101      	movs	r1, #1
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2241      	movs	r2, #65	; 0x41
 8001aec:	2120      	movs	r1, #32
 8001aee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2242      	movs	r2, #66	; 0x42
 8001afa:	2100      	movs	r1, #0
 8001afc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	0018      	movs	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b002      	add	sp, #8
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	f0ffffff 	.word	0xf0ffffff
 8001b0c:	ffff7fff 	.word	0xffff7fff
 8001b10:	02008000 	.word	0x02008000

08001b14 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	68f9      	ldr	r1, [r7, #12]
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	4798      	blx	r3
  }
}
 8001b40:	46c0      	nop			; (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b004      	add	sp, #16
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	001a      	movs	r2, r3
 8001b66:	2301      	movs	r3, #1
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d010      	beq.n	8001b8e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	09db      	lsrs	r3, r3, #7
 8001b70:	001a      	movs	r2, r3
 8001b72:	2301      	movs	r3, #1
 8001b74:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001b76:	d00a      	beq.n	8001b8e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	0052      	lsls	r2, r2, #1
 8001b8c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	0a9b      	lsrs	r3, r3, #10
 8001b92:	001a      	movs	r2, r3
 8001b94:	2301      	movs	r3, #1
 8001b96:	4013      	ands	r3, r2
 8001b98:	d010      	beq.n	8001bbc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	09db      	lsrs	r3, r3, #7
 8001b9e:	001a      	movs	r2, r3
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001ba4:	d00a      	beq.n	8001bbc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	2208      	movs	r2, #8
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	00d2      	lsls	r2, r2, #3
 8001bba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	0a5b      	lsrs	r3, r3, #9
 8001bc0:	001a      	movs	r2, r3
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d010      	beq.n	8001bea <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	09db      	lsrs	r3, r3, #7
 8001bcc:	001a      	movs	r2, r3
 8001bce:	2301      	movs	r3, #1
 8001bd0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001bd2:	d00a      	beq.n	8001bea <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	2202      	movs	r2, #2
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2280      	movs	r2, #128	; 0x80
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	220b      	movs	r2, #11
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d005      	beq.n	8001c04 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0011      	movs	r1, r2
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f000 fbd8 	bl	80023b4 <I2C_ITError>
  }
}
 8001c04:	46c0      	nop			; (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b006      	add	sp, #24
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c14:	46c0      	nop			; (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b002      	add	sp, #8
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b002      	add	sp, #8
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	0008      	movs	r0, r1
 8001c36:	0011      	movs	r1, r2
 8001c38:	1cfb      	adds	r3, r7, #3
 8001c3a:	1c02      	adds	r2, r0, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	003b      	movs	r3, r7
 8001c40:	1c0a      	adds	r2, r1, #0
 8001c42:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c44:	46c0      	nop			; (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b002      	add	sp, #8
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b002      	add	sp, #8
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	5c9b      	ldrb	r3, [r3, r2]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <I2C_Slave_ISR_IT+0x24>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	e0fa      	b.n	8001e96 <I2C_Slave_ISR_IT+0x21a>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2240      	movs	r2, #64	; 0x40
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	001a      	movs	r2, r3
 8001cae:	2301      	movs	r3, #1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d00b      	beq.n	8001ccc <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	001a      	movs	r2, r3
 8001cba:	2301      	movs	r3, #1
 8001cbc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001cbe:	d005      	beq.n	8001ccc <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	0011      	movs	r1, r2
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f000 f9f6 	bl	80020b8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	001a      	movs	r2, r3
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d054      	beq.n	8001d82 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	091b      	lsrs	r3, r3, #4
 8001cdc:	001a      	movs	r2, r3
 8001cde:	2301      	movs	r3, #1
 8001ce0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ce2:	d04e      	beq.n	8001d82 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d12d      	bne.n	8001d4a <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2241      	movs	r2, #65	; 0x41
 8001cf2:	5c9b      	ldrb	r3, [r3, r2]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b28      	cmp	r3, #40	; 0x28
 8001cf8:	d10b      	bne.n	8001d12 <I2C_Slave_ISR_IT+0x96>
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	049b      	lsls	r3, r3, #18
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d106      	bne.n	8001d12 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	0011      	movs	r1, r2
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 faf8 	bl	8002300 <I2C_ITListenCplt>
 8001d10:	e036      	b.n	8001d80 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2241      	movs	r2, #65	; 0x41
 8001d16:	5c9b      	ldrb	r3, [r3, r2]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b29      	cmp	r3, #41	; 0x29
 8001d1c:	d110      	bne.n	8001d40 <I2C_Slave_ISR_IT+0xc4>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	4a5f      	ldr	r2, [pc, #380]	; (8001ea0 <I2C_Slave_ISR_IT+0x224>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00c      	beq.n	8001d40 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2210      	movs	r2, #16
 8001d2c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f000 fc4a 	bl	80025ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f000 f957 	bl	8001fec <I2C_ITSlaveSeqCplt>
 8001d3e:	e01f      	b.n	8001d80 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2210      	movs	r2, #16
 8001d46:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001d48:	e09d      	b.n	8001e86 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2210      	movs	r2, #16
 8001d50:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	2204      	movs	r2, #4
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <I2C_Slave_ISR_IT+0xf4>
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	045b      	lsls	r3, r3, #17
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d000      	beq.n	8001d70 <I2C_Slave_ISR_IT+0xf4>
 8001d6e:	e08a      	b.n	8001e86 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	0011      	movs	r1, r2
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f000 fb1b 	bl	80023b4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001d7e:	e082      	b.n	8001e86 <I2C_Slave_ISR_IT+0x20a>
 8001d80:	e081      	b.n	8001e86 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	001a      	movs	r2, r3
 8001d88:	2301      	movs	r3, #1
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d031      	beq.n	8001df2 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	001a      	movs	r2, r3
 8001d94:	2301      	movs	r3, #1
 8001d96:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001d98:	d02b      	beq.n	8001df2 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d018      	beq.n	8001dd6 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d154      	bne.n	8001e8a <I2C_Slave_ISR_IT+0x20e>
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	4a2f      	ldr	r2, [pc, #188]	; (8001ea0 <I2C_Slave_ISR_IT+0x224>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d050      	beq.n	8001e8a <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 f8fe 	bl	8001fec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001df0:	e04b      	b.n	8001e8a <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	08db      	lsrs	r3, r3, #3
 8001df6:	001a      	movs	r2, r3
 8001df8:	2301      	movs	r3, #1
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d00c      	beq.n	8001e18 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	08db      	lsrs	r3, r3, #3
 8001e02:	001a      	movs	r2, r3
 8001e04:	2301      	movs	r3, #1
 8001e06:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001e08:	d006      	beq.n	8001e18 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	0011      	movs	r1, r2
 8001e10:	0018      	movs	r0, r3
 8001e12:	f000 f847 	bl	8001ea4 <I2C_ITAddrCplt>
 8001e16:	e039      	b.n	8001e8c <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	085b      	lsrs	r3, r3, #1
 8001e1c:	001a      	movs	r2, r3
 8001e1e:	2301      	movs	r3, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	d033      	beq.n	8001e8c <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	085b      	lsrs	r3, r3, #1
 8001e28:	001a      	movs	r2, r3
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001e2e:	d02d      	beq.n	8001e8c <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d018      	beq.n	8001e6c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	851a      	strh	r2, [r3, #40]	; 0x28
 8001e6a:	e00f      	b.n	8001e8c <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	045b      	lsls	r3, r3, #17
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d002      	beq.n	8001e7c <I2C_Slave_ISR_IT+0x200>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d107      	bne.n	8001e8c <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f000 f8b4 	bl	8001fec <I2C_ITSlaveSeqCplt>
 8001e84:	e002      	b.n	8001e8c <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	e000      	b.n	8001e8c <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8001e8a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2240      	movs	r2, #64	; 0x40
 8001e90:	2100      	movs	r1, #0
 8001e92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b006      	add	sp, #24
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	ffff0000 	.word	0xffff0000

08001ea4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ea4:	b5b0      	push	{r4, r5, r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2241      	movs	r2, #65	; 0x41
 8001eb2:	5c9b      	ldrb	r3, [r3, r2]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	001a      	movs	r2, r3
 8001eb8:	2328      	movs	r3, #40	; 0x28
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b28      	cmp	r3, #40	; 0x28
 8001ebe:	d000      	beq.n	8001ec2 <I2C_ITAddrCplt+0x1e>
 8001ec0:	e088      	b.n	8001fd4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	0c1b      	lsrs	r3, r3, #16
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	250f      	movs	r5, #15
 8001ece:	197b      	adds	r3, r7, r5
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	0c1b      	lsrs	r3, r3, #16
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	200c      	movs	r0, #12
 8001ee2:	183b      	adds	r3, r7, r0
 8001ee4:	21fe      	movs	r1, #254	; 0xfe
 8001ee6:	400a      	ands	r2, r1
 8001ee8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	240a      	movs	r4, #10
 8001ef4:	193b      	adds	r3, r7, r4
 8001ef6:	0592      	lsls	r2, r2, #22
 8001ef8:	0d92      	lsrs	r2, r2, #22
 8001efa:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	2308      	movs	r3, #8
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	21fe      	movs	r1, #254	; 0xfe
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d148      	bne.n	8001fa8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001f16:	0021      	movs	r1, r4
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	09db      	lsrs	r3, r3, #7
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	183b      	adds	r3, r7, r0
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	4053      	eors	r3, r2
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	001a      	movs	r2, r3
 8001f2a:	2306      	movs	r3, #6
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d120      	bne.n	8001f72 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8001f30:	183b      	adds	r3, r7, r0
 8001f32:	187a      	adds	r2, r7, r1
 8001f34:	8812      	ldrh	r2, [r2, #0]
 8001f36:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d14c      	bne.n	8001fe4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2208      	movs	r2, #8
 8001f56:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2240      	movs	r2, #64	; 0x40
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001f60:	183b      	adds	r3, r7, r0
 8001f62:	881a      	ldrh	r2, [r3, #0]
 8001f64:	197b      	adds	r3, r7, r5
 8001f66:	7819      	ldrb	r1, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7ff fe5e 	bl	8001c2c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001f70:	e038      	b.n	8001fe4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8001f72:	240c      	movs	r4, #12
 8001f74:	193b      	adds	r3, r7, r4
 8001f76:	2208      	movs	r2, #8
 8001f78:	18ba      	adds	r2, r7, r2
 8001f7a:	8812      	ldrh	r2, [r2, #0]
 8001f7c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	021a      	lsls	r2, r3, #8
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	0011      	movs	r1, r2
 8001f86:	0018      	movs	r0, r3
 8001f88:	f000 fb60 	bl	800264c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	2100      	movs	r1, #0
 8001f92:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001f94:	193b      	adds	r3, r7, r4
 8001f96:	881a      	ldrh	r2, [r3, #0]
 8001f98:	230f      	movs	r3, #15
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	7819      	ldrb	r1, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f7ff fe43 	bl	8001c2c <HAL_I2C_AddrCallback>
}
 8001fa6:	e01d      	b.n	8001fe4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	021a      	lsls	r2, r3, #8
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	0011      	movs	r1, r2
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f000 fb4b 	bl	800264c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2240      	movs	r2, #64	; 0x40
 8001fba:	2100      	movs	r1, #0
 8001fbc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	881a      	ldrh	r2, [r3, #0]
 8001fc4:	230f      	movs	r3, #15
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	7819      	ldrb	r1, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7ff fe2d 	bl	8001c2c <HAL_I2C_AddrCallback>
}
 8001fd2:	e007      	b.n	8001fe4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2208      	movs	r2, #8
 8001fda:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2240      	movs	r2, #64	; 0x40
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	5499      	strb	r1, [r3, r2]
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	b004      	add	sp, #16
 8001fea:	bdb0      	pop	{r4, r5, r7, pc}

08001fec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2242      	movs	r2, #66	; 0x42
 8002000:	2100      	movs	r1, #0
 8002002:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	0b9b      	lsrs	r3, r3, #14
 8002008:	001a      	movs	r2, r3
 800200a:	2301      	movs	r3, #1
 800200c:	4013      	ands	r3, r2
 800200e:	d008      	beq.n	8002022 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4925      	ldr	r1, [pc, #148]	; (80020b0 <I2C_ITSlaveSeqCplt+0xc4>)
 800201c:	400a      	ands	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e00d      	b.n	800203e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	0bdb      	lsrs	r3, r3, #15
 8002026:	001a      	movs	r2, r3
 8002028:	2301      	movs	r3, #1
 800202a:	4013      	ands	r3, r2
 800202c:	d007      	beq.n	800203e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	491e      	ldr	r1, [pc, #120]	; (80020b4 <I2C_ITSlaveSeqCplt+0xc8>)
 800203a:	400a      	ands	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2241      	movs	r2, #65	; 0x41
 8002042:	5c9b      	ldrb	r3, [r3, r2]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b29      	cmp	r3, #41	; 0x29
 8002048:	d114      	bne.n	8002074 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2241      	movs	r2, #65	; 0x41
 800204e:	2128      	movs	r1, #40	; 0x28
 8002050:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2221      	movs	r2, #33	; 0x21
 8002056:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2101      	movs	r1, #1
 800205c:	0018      	movs	r0, r3
 800205e:	f000 faf5 	bl	800264c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2240      	movs	r2, #64	; 0x40
 8002066:	2100      	movs	r1, #0
 8002068:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	0018      	movs	r0, r3
 800206e:	f7ff fdcd 	bl	8001c0c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002072:	e019      	b.n	80020a8 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2241      	movs	r2, #65	; 0x41
 8002078:	5c9b      	ldrb	r3, [r3, r2]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b2a      	cmp	r3, #42	; 0x2a
 800207e:	d113      	bne.n	80020a8 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2241      	movs	r2, #65	; 0x41
 8002084:	2128      	movs	r1, #40	; 0x28
 8002086:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2222      	movs	r2, #34	; 0x22
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2102      	movs	r1, #2
 8002092:	0018      	movs	r0, r3
 8002094:	f000 fada 	bl	800264c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2240      	movs	r2, #64	; 0x40
 800209c:	2100      	movs	r1, #0
 800209e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	0018      	movs	r0, r3
 80020a4:	f7ff fdba 	bl	8001c1c <HAL_I2C_SlaveRxCpltCallback>
}
 80020a8:	46c0      	nop			; (mov r8, r8)
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b004      	add	sp, #16
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	ffffbfff 	.word	0xffffbfff
 80020b4:	ffff7fff 	.word	0xffff7fff

080020b8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80020ce:	200f      	movs	r0, #15
 80020d0:	183b      	adds	r3, r7, r0
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	2141      	movs	r1, #65	; 0x41
 80020d6:	5c52      	ldrb	r2, [r2, r1]
 80020d8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2220      	movs	r2, #32
 80020e0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020e2:	183b      	adds	r3, r7, r0
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b21      	cmp	r3, #33	; 0x21
 80020e8:	d003      	beq.n	80020f2 <I2C_ITSlaveCplt+0x3a>
 80020ea:	183b      	adds	r3, r7, r0
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b29      	cmp	r3, #41	; 0x29
 80020f0:	d109      	bne.n	8002106 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80020f2:	4a7d      	ldr	r2, [pc, #500]	; (80022e8 <I2C_ITSlaveCplt+0x230>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	0011      	movs	r1, r2
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 faa7 	bl	800264c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2221      	movs	r2, #33	; 0x21
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
 8002104:	e011      	b.n	800212a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002106:	220f      	movs	r2, #15
 8002108:	18bb      	adds	r3, r7, r2
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b22      	cmp	r3, #34	; 0x22
 800210e:	d003      	beq.n	8002118 <I2C_ITSlaveCplt+0x60>
 8002110:	18bb      	adds	r3, r7, r2
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b2a      	cmp	r3, #42	; 0x2a
 8002116:	d108      	bne.n	800212a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002118:	4a74      	ldr	r2, [pc, #464]	; (80022ec <I2C_ITSlaveCplt+0x234>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	0011      	movs	r1, r2
 800211e:	0018      	movs	r0, r3
 8002120:	f000 fa94 	bl	800264c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2222      	movs	r2, #34	; 0x22
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2180      	movs	r1, #128	; 0x80
 8002136:	0209      	lsls	r1, r1, #8
 8002138:	430a      	orrs	r2, r1
 800213a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	496a      	ldr	r1, [pc, #424]	; (80022f0 <I2C_ITSlaveCplt+0x238>)
 8002148:	400a      	ands	r2, r1
 800214a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	0018      	movs	r0, r3
 8002150:	f000 fa3b 	bl	80025ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	0b9b      	lsrs	r3, r3, #14
 8002158:	001a      	movs	r2, r3
 800215a:	2301      	movs	r3, #1
 800215c:	4013      	ands	r3, r2
 800215e:	d013      	beq.n	8002188 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4962      	ldr	r1, [pc, #392]	; (80022f4 <I2C_ITSlaveCplt+0x23c>)
 800216c:	400a      	ands	r2, r1
 800216e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002174:	2b00      	cmp	r3, #0
 8002176:	d020      	beq.n	80021ba <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	b29a      	uxth	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002186:	e018      	b.n	80021ba <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	0bdb      	lsrs	r3, r3, #15
 800218c:	001a      	movs	r2, r3
 800218e:	2301      	movs	r3, #1
 8002190:	4013      	ands	r3, r2
 8002192:	d012      	beq.n	80021ba <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4956      	ldr	r1, [pc, #344]	; (80022f8 <I2C_ITSlaveCplt+0x240>)
 80021a0:	400a      	ands	r2, r1
 80021a2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d006      	beq.n	80021ba <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	001a      	movs	r2, r3
 80021c0:	2301      	movs	r3, #1
 80021c2:	4013      	ands	r3, r2
 80021c4:	d020      	beq.n	8002208 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2204      	movs	r2, #4
 80021ca:	4393      	bics	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00c      	beq.n	8002208 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	2204      	movs	r2, #4
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2242      	movs	r2, #66	; 0x42
 8002222:	2100      	movs	r1, #0
 8002224:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0011      	movs	r1, r2
 800223c:	0018      	movs	r0, r3
 800223e:	f000 f8b9 	bl	80023b4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2241      	movs	r2, #65	; 0x41
 8002246:	5c9b      	ldrb	r3, [r3, r2]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b28      	cmp	r3, #40	; 0x28
 800224c:	d147      	bne.n	80022de <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	0011      	movs	r1, r2
 8002254:	0018      	movs	r0, r3
 8002256:	f000 f853 	bl	8002300 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800225a:	e040      	b.n	80022de <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	4a26      	ldr	r2, [pc, #152]	; (80022fc <I2C_ITSlaveCplt+0x244>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d016      	beq.n	8002294 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	0018      	movs	r0, r3
 800226a:	f7ff febf 	bl	8001fec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a22      	ldr	r2, [pc, #136]	; (80022fc <I2C_ITSlaveCplt+0x244>)
 8002272:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2241      	movs	r2, #65	; 0x41
 8002278:	2120      	movs	r1, #32
 800227a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2240      	movs	r2, #64	; 0x40
 8002286:	2100      	movs	r1, #0
 8002288:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	0018      	movs	r0, r3
 800228e:	f7ff fcdd 	bl	8001c4c <HAL_I2C_ListenCpltCallback>
}
 8002292:	e024      	b.n	80022de <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2241      	movs	r2, #65	; 0x41
 8002298:	5c9b      	ldrb	r3, [r3, r2]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b22      	cmp	r3, #34	; 0x22
 800229e:	d10f      	bne.n	80022c0 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2241      	movs	r2, #65	; 0x41
 80022a4:	2120      	movs	r1, #32
 80022a6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2240      	movs	r2, #64	; 0x40
 80022b2:	2100      	movs	r1, #0
 80022b4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7ff fcaf 	bl	8001c1c <HAL_I2C_SlaveRxCpltCallback>
}
 80022be:	e00e      	b.n	80022de <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2241      	movs	r2, #65	; 0x41
 80022c4:	2120      	movs	r1, #32
 80022c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2240      	movs	r2, #64	; 0x40
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0018      	movs	r0, r3
 80022da:	f7ff fc97 	bl	8001c0c <HAL_I2C_SlaveTxCpltCallback>
}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b006      	add	sp, #24
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	00008001 	.word	0x00008001
 80022ec:	00008002 	.word	0x00008002
 80022f0:	fe00e800 	.word	0xfe00e800
 80022f4:	ffffbfff 	.word	0xffffbfff
 80022f8:	ffff7fff 	.word	0xffff7fff
 80022fc:	ffff0000 	.word	0xffff0000

08002300 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a27      	ldr	r2, [pc, #156]	; (80023ac <I2C_ITListenCplt+0xac>)
 800230e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2241      	movs	r2, #65	; 0x41
 800231a:	2120      	movs	r1, #32
 800231c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2242      	movs	r2, #66	; 0x42
 8002322:	2100      	movs	r1, #0
 8002324:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	001a      	movs	r2, r3
 8002332:	2301      	movs	r3, #1
 8002334:	4013      	ands	r3, r2
 8002336:	d022      	beq.n	800237e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002354:	2b00      	cmp	r3, #0
 8002356:	d012      	beq.n	800237e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29b      	uxth	r3, r3
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	2204      	movs	r2, #4
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800237e:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <I2C_ITListenCplt+0xb0>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	0011      	movs	r1, r2
 8002384:	0018      	movs	r0, r3
 8002386:	f000 f961 	bl	800264c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2210      	movs	r2, #16
 8002390:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2240      	movs	r2, #64	; 0x40
 8002396:	2100      	movs	r1, #0
 8002398:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0018      	movs	r0, r3
 800239e:	f7ff fc55 	bl	8001c4c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b002      	add	sp, #8
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	ffff0000 	.word	0xffff0000
 80023b0:	00008003 	.word	0x00008003

080023b4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80023be:	200f      	movs	r0, #15
 80023c0:	183b      	adds	r3, r7, r0
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	2141      	movs	r1, #65	; 0x41
 80023c6:	5c52      	ldrb	r2, [r2, r1]
 80023c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2242      	movs	r2, #66	; 0x42
 80023ce:	2100      	movs	r1, #0
 80023d0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a62      	ldr	r2, [pc, #392]	; (8002560 <I2C_ITError+0x1ac>)
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80023ea:	183b      	adds	r3, r7, r0
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b28      	cmp	r3, #40	; 0x28
 80023f0:	d007      	beq.n	8002402 <I2C_ITError+0x4e>
 80023f2:	183b      	adds	r3, r7, r0
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b29      	cmp	r3, #41	; 0x29
 80023f8:	d003      	beq.n	8002402 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80023fa:	183b      	adds	r3, r7, r0
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b2a      	cmp	r3, #42	; 0x2a
 8002400:	d10c      	bne.n	800241c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2103      	movs	r1, #3
 8002406:	0018      	movs	r0, r3
 8002408:	f000 f920 	bl	800264c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2241      	movs	r2, #65	; 0x41
 8002410:	2128      	movs	r1, #40	; 0x28
 8002412:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a53      	ldr	r2, [pc, #332]	; (8002564 <I2C_ITError+0x1b0>)
 8002418:	635a      	str	r2, [r3, #52]	; 0x34
 800241a:	e012      	b.n	8002442 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800241c:	4a52      	ldr	r2, [pc, #328]	; (8002568 <I2C_ITError+0x1b4>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	0011      	movs	r1, r2
 8002422:	0018      	movs	r0, r3
 8002424:	f000 f912 	bl	800264c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2241      	movs	r2, #65	; 0x41
 800242c:	5c9b      	ldrb	r3, [r3, r2]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b60      	cmp	r3, #96	; 0x60
 8002432:	d003      	beq.n	800243c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2241      	movs	r2, #65	; 0x41
 8002438:	2120      	movs	r1, #32
 800243a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244c:	2b00      	cmp	r3, #0
 800244e:	d03b      	beq.n	80024c8 <I2C_ITError+0x114>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b11      	cmp	r3, #17
 8002454:	d002      	beq.n	800245c <I2C_ITError+0xa8>
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b21      	cmp	r3, #33	; 0x21
 800245a:	d135      	bne.n	80024c8 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	01db      	lsls	r3, r3, #7
 8002466:	401a      	ands	r2, r3
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	01db      	lsls	r3, r3, #7
 800246c:	429a      	cmp	r2, r3
 800246e:	d107      	bne.n	8002480 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	493c      	ldr	r1, [pc, #240]	; (800256c <I2C_ITError+0x1b8>)
 800247c:	400a      	ands	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	0018      	movs	r0, r3
 8002486:	f7ff f902 	bl	800168e <HAL_DMA_GetState>
 800248a:	0003      	movs	r3, r0
 800248c:	2b01      	cmp	r3, #1
 800248e:	d016      	beq.n	80024be <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	4a36      	ldr	r2, [pc, #216]	; (8002570 <I2C_ITError+0x1bc>)
 8002496:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2240      	movs	r2, #64	; 0x40
 800249c:	2100      	movs	r1, #0
 800249e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7ff f8ad 	bl	8001604 <HAL_DMA_Abort_IT>
 80024aa:	1e03      	subs	r3, r0, #0
 80024ac:	d051      	beq.n	8002552 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	0018      	movs	r0, r3
 80024ba:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80024bc:	e049      	b.n	8002552 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f000 f859 	bl	8002578 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80024c6:	e044      	b.n	8002552 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d03b      	beq.n	8002548 <I2C_ITError+0x194>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b12      	cmp	r3, #18
 80024d4:	d002      	beq.n	80024dc <I2C_ITError+0x128>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b22      	cmp	r3, #34	; 0x22
 80024da:	d135      	bne.n	8002548 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	401a      	ands	r2, r3
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d107      	bne.n	8002500 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	491e      	ldr	r1, [pc, #120]	; (8002574 <I2C_ITError+0x1c0>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	0018      	movs	r0, r3
 8002506:	f7ff f8c2 	bl	800168e <HAL_DMA_GetState>
 800250a:	0003      	movs	r3, r0
 800250c:	2b01      	cmp	r3, #1
 800250e:	d016      	beq.n	800253e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	4a16      	ldr	r2, [pc, #88]	; (8002570 <I2C_ITError+0x1bc>)
 8002516:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2240      	movs	r2, #64	; 0x40
 800251c:	2100      	movs	r1, #0
 800251e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002524:	0018      	movs	r0, r3
 8002526:	f7ff f86d 	bl	8001604 <HAL_DMA_Abort_IT>
 800252a:	1e03      	subs	r3, r0, #0
 800252c:	d013      	beq.n	8002556 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002538:	0018      	movs	r0, r3
 800253a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800253c:	e00b      	b.n	8002556 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	0018      	movs	r0, r3
 8002542:	f000 f819 	bl	8002578 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002546:	e006      	b.n	8002556 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	0018      	movs	r0, r3
 800254c:	f000 f814 	bl	8002578 <I2C_TreatErrorCallback>
  }
}
 8002550:	e002      	b.n	8002558 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	e000      	b.n	8002558 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002556:	46c0      	nop			; (mov r8, r8)
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b004      	add	sp, #16
 800255e:	bd80      	pop	{r7, pc}
 8002560:	ffff0000 	.word	0xffff0000
 8002564:	08001c7d 	.word	0x08001c7d
 8002568:	00008003 	.word	0x00008003
 800256c:	ffffbfff 	.word	0xffffbfff
 8002570:	0800260f 	.word	0x0800260f
 8002574:	ffff7fff 	.word	0xffff7fff

08002578 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2241      	movs	r2, #65	; 0x41
 8002584:	5c9b      	ldrb	r3, [r3, r2]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b60      	cmp	r3, #96	; 0x60
 800258a:	d10f      	bne.n	80025ac <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2241      	movs	r2, #65	; 0x41
 8002590:	2120      	movs	r1, #32
 8002592:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2240      	movs	r2, #64	; 0x40
 800259e:	2100      	movs	r1, #0
 80025a0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7ff fb61 	bl	8001c6c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80025aa:	e00a      	b.n	80025c2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2240      	movs	r2, #64	; 0x40
 80025b6:	2100      	movs	r1, #0
 80025b8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	0018      	movs	r0, r3
 80025be:	f7ff fb4d 	bl	8001c5c <HAL_I2C_ErrorCallback>
}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b002      	add	sp, #8
 80025c8:	bd80      	pop	{r7, pc}

080025ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2202      	movs	r2, #2
 80025da:	4013      	ands	r3, r2
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d103      	bne.n	80025e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2200      	movs	r2, #0
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2201      	movs	r2, #1
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d007      	beq.n	8002606 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699a      	ldr	r2, [r3, #24]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2101      	movs	r1, #1
 8002602:	430a      	orrs	r2, r1
 8002604:	619a      	str	r2, [r3, #24]
  }
}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	46bd      	mov	sp, r7
 800260a:	b002      	add	sp, #8
 800260c:	bd80      	pop	{r7, pc}

0800260e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	2200      	movs	r2, #0
 800262a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002638:	2200      	movs	r2, #0
 800263a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	0018      	movs	r0, r3
 8002640:	f7ff ff9a 	bl	8002578 <I2C_TreatErrorCallback>
}
 8002644:	46c0      	nop			; (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	b004      	add	sp, #16
 800264a:	bd80      	pop	{r7, pc}

0800264c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	000a      	movs	r2, r1
 8002656:	1cbb      	adds	r3, r7, #2
 8002658:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800265e:	1cbb      	adds	r3, r7, #2
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	2201      	movs	r2, #1
 8002664:	4013      	ands	r3, r2
 8002666:	d010      	beq.n	800268a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2242      	movs	r2, #66	; 0x42
 800266c:	4313      	orrs	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2241      	movs	r2, #65	; 0x41
 8002674:	5c9b      	ldrb	r3, [r3, r2]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	001a      	movs	r2, r3
 800267a:	2328      	movs	r3, #40	; 0x28
 800267c:	4013      	ands	r3, r2
 800267e:	2b28      	cmp	r3, #40	; 0x28
 8002680:	d003      	beq.n	800268a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	22b0      	movs	r2, #176	; 0xb0
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800268a:	1cbb      	adds	r3, r7, #2
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	2202      	movs	r2, #2
 8002690:	4013      	ands	r3, r2
 8002692:	d010      	beq.n	80026b6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2244      	movs	r2, #68	; 0x44
 8002698:	4313      	orrs	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2241      	movs	r2, #65	; 0x41
 80026a0:	5c9b      	ldrb	r3, [r3, r2]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	001a      	movs	r2, r3
 80026a6:	2328      	movs	r3, #40	; 0x28
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b28      	cmp	r3, #40	; 0x28
 80026ac:	d003      	beq.n	80026b6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	22b0      	movs	r2, #176	; 0xb0
 80026b2:	4313      	orrs	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80026b6:	1cbb      	adds	r3, r7, #2
 80026b8:	2200      	movs	r2, #0
 80026ba:	5e9b      	ldrsh	r3, [r3, r2]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	da03      	bge.n	80026c8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	22b8      	movs	r2, #184	; 0xb8
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80026c8:	1cbb      	adds	r3, r7, #2
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	2b10      	cmp	r3, #16
 80026ce:	d103      	bne.n	80026d8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2290      	movs	r2, #144	; 0x90
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80026d8:	1cbb      	adds	r3, r7, #2
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	2b20      	cmp	r3, #32
 80026de:	d103      	bne.n	80026e8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80026e8:	1cbb      	adds	r3, r7, #2
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	2b40      	cmp	r3, #64	; 0x40
 80026ee:	d103      	bne.n	80026f8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2240      	movs	r2, #64	; 0x40
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	43d9      	mvns	r1, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	400a      	ands	r2, r1
 8002708:	601a      	str	r2, [r3, #0]
}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b004      	add	sp, #16
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2241      	movs	r2, #65	; 0x41
 8002722:	5c9b      	ldrb	r3, [r3, r2]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b20      	cmp	r3, #32
 8002728:	d138      	bne.n	800279c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2240      	movs	r2, #64	; 0x40
 800272e:	5c9b      	ldrb	r3, [r3, r2]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002734:	2302      	movs	r3, #2
 8002736:	e032      	b.n	800279e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2240      	movs	r2, #64	; 0x40
 800273c:	2101      	movs	r1, #1
 800273e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2241      	movs	r2, #65	; 0x41
 8002744:	2124      	movs	r1, #36	; 0x24
 8002746:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2101      	movs	r1, #1
 8002754:	438a      	bics	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4911      	ldr	r1, [pc, #68]	; (80027a8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002764:	400a      	ands	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6819      	ldr	r1, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2101      	movs	r1, #1
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2241      	movs	r2, #65	; 0x41
 800278c:	2120      	movs	r1, #32
 800278e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2240      	movs	r2, #64	; 0x40
 8002794:	2100      	movs	r1, #0
 8002796:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	e000      	b.n	800279e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800279c:	2302      	movs	r3, #2
  }
}
 800279e:	0018      	movs	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b002      	add	sp, #8
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	ffffefff 	.word	0xffffefff

080027ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2241      	movs	r2, #65	; 0x41
 80027ba:	5c9b      	ldrb	r3, [r3, r2]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d139      	bne.n	8002836 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2240      	movs	r2, #64	; 0x40
 80027c6:	5c9b      	ldrb	r3, [r3, r2]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e033      	b.n	8002838 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2240      	movs	r2, #64	; 0x40
 80027d4:	2101      	movs	r1, #1
 80027d6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2241      	movs	r2, #65	; 0x41
 80027dc:	2124      	movs	r1, #36	; 0x24
 80027de:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2101      	movs	r1, #1
 80027ec:	438a      	bics	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a11      	ldr	r2, [pc, #68]	; (8002840 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	430a      	orrs	r2, r1
 8002820:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2241      	movs	r2, #65	; 0x41
 8002826:	2120      	movs	r1, #32
 8002828:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2240      	movs	r2, #64	; 0x40
 800282e:	2100      	movs	r1, #0
 8002830:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002836:	2302      	movs	r3, #2
  }
}
 8002838:	0018      	movs	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	b004      	add	sp, #16
 800283e:	bd80      	pop	{r7, pc}
 8002840:	fffff0ff 	.word	0xfffff0ff

08002844 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d102      	bne.n	8002858 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	f000 fb76 	bl	8002f44 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2201      	movs	r2, #1
 800285e:	4013      	ands	r3, r2
 8002860:	d100      	bne.n	8002864 <HAL_RCC_OscConfig+0x20>
 8002862:	e08e      	b.n	8002982 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002864:	4bc5      	ldr	r3, [pc, #788]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	220c      	movs	r2, #12
 800286a:	4013      	ands	r3, r2
 800286c:	2b04      	cmp	r3, #4
 800286e:	d00e      	beq.n	800288e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002870:	4bc2      	ldr	r3, [pc, #776]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	220c      	movs	r2, #12
 8002876:	4013      	ands	r3, r2
 8002878:	2b08      	cmp	r3, #8
 800287a:	d117      	bne.n	80028ac <HAL_RCC_OscConfig+0x68>
 800287c:	4bbf      	ldr	r3, [pc, #764]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	23c0      	movs	r3, #192	; 0xc0
 8002882:	025b      	lsls	r3, r3, #9
 8002884:	401a      	ands	r2, r3
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	025b      	lsls	r3, r3, #9
 800288a:	429a      	cmp	r2, r3
 800288c:	d10e      	bne.n	80028ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288e:	4bbb      	ldr	r3, [pc, #748]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	029b      	lsls	r3, r3, #10
 8002896:	4013      	ands	r3, r2
 8002898:	d100      	bne.n	800289c <HAL_RCC_OscConfig+0x58>
 800289a:	e071      	b.n	8002980 <HAL_RCC_OscConfig+0x13c>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d000      	beq.n	80028a6 <HAL_RCC_OscConfig+0x62>
 80028a4:	e06c      	b.n	8002980 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	f000 fb4c 	bl	8002f44 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_OscConfig+0x80>
 80028b4:	4bb1      	ldr	r3, [pc, #708]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4bb0      	ldr	r3, [pc, #704]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 80028ba:	2180      	movs	r1, #128	; 0x80
 80028bc:	0249      	lsls	r1, r1, #9
 80028be:	430a      	orrs	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	e02f      	b.n	8002924 <HAL_RCC_OscConfig+0xe0>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10c      	bne.n	80028e6 <HAL_RCC_OscConfig+0xa2>
 80028cc:	4bab      	ldr	r3, [pc, #684]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4baa      	ldr	r3, [pc, #680]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 80028d2:	49ab      	ldr	r1, [pc, #684]	; (8002b80 <HAL_RCC_OscConfig+0x33c>)
 80028d4:	400a      	ands	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	4ba8      	ldr	r3, [pc, #672]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4ba7      	ldr	r3, [pc, #668]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 80028de:	49a9      	ldr	r1, [pc, #676]	; (8002b84 <HAL_RCC_OscConfig+0x340>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	e01e      	b.n	8002924 <HAL_RCC_OscConfig+0xe0>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b05      	cmp	r3, #5
 80028ec:	d10e      	bne.n	800290c <HAL_RCC_OscConfig+0xc8>
 80028ee:	4ba3      	ldr	r3, [pc, #652]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4ba2      	ldr	r3, [pc, #648]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 80028f4:	2180      	movs	r1, #128	; 0x80
 80028f6:	02c9      	lsls	r1, r1, #11
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	4b9f      	ldr	r3, [pc, #636]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b9e      	ldr	r3, [pc, #632]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	0249      	lsls	r1, r1, #9
 8002906:	430a      	orrs	r2, r1
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e00b      	b.n	8002924 <HAL_RCC_OscConfig+0xe0>
 800290c:	4b9b      	ldr	r3, [pc, #620]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b9a      	ldr	r3, [pc, #616]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002912:	499b      	ldr	r1, [pc, #620]	; (8002b80 <HAL_RCC_OscConfig+0x33c>)
 8002914:	400a      	ands	r2, r1
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	4b98      	ldr	r3, [pc, #608]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b97      	ldr	r3, [pc, #604]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 800291e:	4999      	ldr	r1, [pc, #612]	; (8002b84 <HAL_RCC_OscConfig+0x340>)
 8002920:	400a      	ands	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d014      	beq.n	8002956 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292c:	f7fe f8ea 	bl	8000b04 <HAL_GetTick>
 8002930:	0003      	movs	r3, r0
 8002932:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002936:	f7fe f8e5 	bl	8000b04 <HAL_GetTick>
 800293a:	0002      	movs	r2, r0
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b64      	cmp	r3, #100	; 0x64
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e2fd      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002948:	4b8c      	ldr	r3, [pc, #560]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	029b      	lsls	r3, r3, #10
 8002950:	4013      	ands	r3, r2
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0xf2>
 8002954:	e015      	b.n	8002982 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002956:	f7fe f8d5 	bl	8000b04 <HAL_GetTick>
 800295a:	0003      	movs	r3, r0
 800295c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002960:	f7fe f8d0 	bl	8000b04 <HAL_GetTick>
 8002964:	0002      	movs	r2, r0
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e2e8      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002972:	4b82      	ldr	r3, [pc, #520]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	029b      	lsls	r3, r3, #10
 800297a:	4013      	ands	r3, r2
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x11c>
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002980:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2202      	movs	r2, #2
 8002988:	4013      	ands	r3, r2
 800298a:	d100      	bne.n	800298e <HAL_RCC_OscConfig+0x14a>
 800298c:	e06c      	b.n	8002a68 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800298e:	4b7b      	ldr	r3, [pc, #492]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	220c      	movs	r2, #12
 8002994:	4013      	ands	r3, r2
 8002996:	d00e      	beq.n	80029b6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002998:	4b78      	ldr	r3, [pc, #480]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	220c      	movs	r2, #12
 800299e:	4013      	ands	r3, r2
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d11f      	bne.n	80029e4 <HAL_RCC_OscConfig+0x1a0>
 80029a4:	4b75      	ldr	r3, [pc, #468]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	23c0      	movs	r3, #192	; 0xc0
 80029aa:	025b      	lsls	r3, r3, #9
 80029ac:	401a      	ands	r2, r3
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	021b      	lsls	r3, r3, #8
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d116      	bne.n	80029e4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b6:	4b71      	ldr	r3, [pc, #452]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2202      	movs	r2, #2
 80029bc:	4013      	ands	r3, r2
 80029be:	d005      	beq.n	80029cc <HAL_RCC_OscConfig+0x188>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e2bb      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029cc:	4b6b      	ldr	r3, [pc, #428]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	22f8      	movs	r2, #248	; 0xf8
 80029d2:	4393      	bics	r3, r2
 80029d4:	0019      	movs	r1, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	00da      	lsls	r2, r3, #3
 80029dc:	4b67      	ldr	r3, [pc, #412]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	e041      	b.n	8002a68 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d024      	beq.n	8002a36 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ec:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4b62      	ldr	r3, [pc, #392]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe f884 	bl	8000b04 <HAL_GetTick>
 80029fc:	0003      	movs	r3, r0
 80029fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a02:	f7fe f87f 	bl	8000b04 <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e297      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d0f1      	beq.n	8002a02 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1e:	4b57      	ldr	r3, [pc, #348]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	22f8      	movs	r2, #248	; 0xf8
 8002a24:	4393      	bics	r3, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	00da      	lsls	r2, r3, #3
 8002a2e:	4b53      	ldr	r3, [pc, #332]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002a30:	430a      	orrs	r2, r1
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	e018      	b.n	8002a68 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a36:	4b51      	ldr	r3, [pc, #324]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4b50      	ldr	r3, [pc, #320]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	438a      	bics	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7fe f85f 	bl	8000b04 <HAL_GetTick>
 8002a46:	0003      	movs	r3, r0
 8002a48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a4c:	f7fe f85a 	bl	8000b04 <HAL_GetTick>
 8002a50:	0002      	movs	r2, r0
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e272      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5e:	4b47      	ldr	r3, [pc, #284]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2202      	movs	r2, #2
 8002a64:	4013      	ands	r3, r2
 8002a66:	d1f1      	bne.n	8002a4c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d036      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d019      	beq.n	8002aae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7a:	4b40      	ldr	r3, [pc, #256]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a7e:	4b3f      	ldr	r3, [pc, #252]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002a80:	2101      	movs	r1, #1
 8002a82:	430a      	orrs	r2, r1
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a86:	f7fe f83d 	bl	8000b04 <HAL_GetTick>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a90:	f7fe f838 	bl	8000b04 <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e250      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d0f1      	beq.n	8002a90 <HAL_RCC_OscConfig+0x24c>
 8002aac:	e018      	b.n	8002ae0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aae:	4b33      	ldr	r3, [pc, #204]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002ab0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ab2:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	438a      	bics	r2, r1
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aba:	f7fe f823 	bl	8000b04 <HAL_GetTick>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac4:	f7fe f81e 	bl	8000b04 <HAL_GetTick>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e236      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad6:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	2202      	movs	r2, #2
 8002adc:	4013      	ands	r3, r2
 8002ade:	d1f1      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d100      	bne.n	8002aec <HAL_RCC_OscConfig+0x2a8>
 8002aea:	e0b5      	b.n	8002c58 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aec:	201f      	movs	r0, #31
 8002aee:	183b      	adds	r3, r7, r0
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af4:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002af6:	69da      	ldr	r2, [r3, #28]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	055b      	lsls	r3, r3, #21
 8002afc:	4013      	ands	r3, r2
 8002afe:	d110      	bne.n	8002b22 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002b06:	2180      	movs	r1, #128	; 0x80
 8002b08:	0549      	lsls	r1, r1, #21
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	61da      	str	r2, [r3, #28]
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	055b      	lsls	r3, r3, #21
 8002b16:	4013      	ands	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b1c:	183b      	adds	r3, r7, r0
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_RCC_OscConfig+0x344>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d11a      	bne.n	8002b64 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b2e:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <HAL_RCC_OscConfig+0x344>)
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <HAL_RCC_OscConfig+0x344>)
 8002b34:	2180      	movs	r1, #128	; 0x80
 8002b36:	0049      	lsls	r1, r1, #1
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b3c:	f7fd ffe2 	bl	8000b04 <HAL_GetTick>
 8002b40:	0003      	movs	r3, r0
 8002b42:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b46:	f7fd ffdd 	bl	8000b04 <HAL_GetTick>
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b64      	cmp	r3, #100	; 0x64
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1f5      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCC_OscConfig+0x344>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4013      	ands	r3, r2
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d10f      	bne.n	8002b8c <HAL_RCC_OscConfig+0x348>
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002b6e:	6a1a      	ldr	r2, [r3, #32]
 8002b70:	4b02      	ldr	r3, [pc, #8]	; (8002b7c <HAL_RCC_OscConfig+0x338>)
 8002b72:	2101      	movs	r1, #1
 8002b74:	430a      	orrs	r2, r1
 8002b76:	621a      	str	r2, [r3, #32]
 8002b78:	e036      	b.n	8002be8 <HAL_RCC_OscConfig+0x3a4>
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	fffeffff 	.word	0xfffeffff
 8002b84:	fffbffff 	.word	0xfffbffff
 8002b88:	40007000 	.word	0x40007000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10c      	bne.n	8002bae <HAL_RCC_OscConfig+0x36a>
 8002b94:	4bca      	ldr	r3, [pc, #808]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002b96:	6a1a      	ldr	r2, [r3, #32]
 8002b98:	4bc9      	ldr	r3, [pc, #804]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	438a      	bics	r2, r1
 8002b9e:	621a      	str	r2, [r3, #32]
 8002ba0:	4bc7      	ldr	r3, [pc, #796]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002ba2:	6a1a      	ldr	r2, [r3, #32]
 8002ba4:	4bc6      	ldr	r3, [pc, #792]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002ba6:	2104      	movs	r1, #4
 8002ba8:	438a      	bics	r2, r1
 8002baa:	621a      	str	r2, [r3, #32]
 8002bac:	e01c      	b.n	8002be8 <HAL_RCC_OscConfig+0x3a4>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b05      	cmp	r3, #5
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x38c>
 8002bb6:	4bc2      	ldr	r3, [pc, #776]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002bb8:	6a1a      	ldr	r2, [r3, #32]
 8002bba:	4bc1      	ldr	r3, [pc, #772]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002bbc:	2104      	movs	r1, #4
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	621a      	str	r2, [r3, #32]
 8002bc2:	4bbf      	ldr	r3, [pc, #764]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002bc4:	6a1a      	ldr	r2, [r3, #32]
 8002bc6:	4bbe      	ldr	r3, [pc, #760]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002bc8:	2101      	movs	r1, #1
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	621a      	str	r2, [r3, #32]
 8002bce:	e00b      	b.n	8002be8 <HAL_RCC_OscConfig+0x3a4>
 8002bd0:	4bbb      	ldr	r3, [pc, #748]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002bd2:	6a1a      	ldr	r2, [r3, #32]
 8002bd4:	4bba      	ldr	r3, [pc, #744]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	438a      	bics	r2, r1
 8002bda:	621a      	str	r2, [r3, #32]
 8002bdc:	4bb8      	ldr	r3, [pc, #736]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002bde:	6a1a      	ldr	r2, [r3, #32]
 8002be0:	4bb7      	ldr	r3, [pc, #732]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002be2:	2104      	movs	r1, #4
 8002be4:	438a      	bics	r2, r1
 8002be6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d014      	beq.n	8002c1a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf0:	f7fd ff88 	bl	8000b04 <HAL_GetTick>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf8:	e009      	b.n	8002c0e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7fd ff83 	bl	8000b04 <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	4aaf      	ldr	r2, [pc, #700]	; (8002ec4 <HAL_RCC_OscConfig+0x680>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e19a      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0e:	4bac      	ldr	r3, [pc, #688]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	2202      	movs	r2, #2
 8002c14:	4013      	ands	r3, r2
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x3b6>
 8002c18:	e013      	b.n	8002c42 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1a:	f7fd ff73 	bl	8000b04 <HAL_GetTick>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c22:	e009      	b.n	8002c38 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c24:	f7fd ff6e 	bl	8000b04 <HAL_GetTick>
 8002c28:	0002      	movs	r2, r0
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	4aa5      	ldr	r2, [pc, #660]	; (8002ec4 <HAL_RCC_OscConfig+0x680>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e185      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c38:	4ba1      	ldr	r3, [pc, #644]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d1f0      	bne.n	8002c24 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c42:	231f      	movs	r3, #31
 8002c44:	18fb      	adds	r3, r7, r3
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4c:	4b9c      	ldr	r3, [pc, #624]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002c4e:	69da      	ldr	r2, [r3, #28]
 8002c50:	4b9b      	ldr	r3, [pc, #620]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002c52:	499d      	ldr	r1, [pc, #628]	; (8002ec8 <HAL_RCC_OscConfig+0x684>)
 8002c54:	400a      	ands	r2, r1
 8002c56:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d063      	beq.n	8002d2a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d12a      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c6a:	4b95      	ldr	r3, [pc, #596]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6e:	4b94      	ldr	r3, [pc, #592]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002c70:	2104      	movs	r1, #4
 8002c72:	430a      	orrs	r2, r1
 8002c74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c76:	4b92      	ldr	r3, [pc, #584]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c7a:	4b91      	ldr	r3, [pc, #580]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c82:	f7fd ff3f 	bl	8000b04 <HAL_GetTick>
 8002c86:	0003      	movs	r3, r0
 8002c88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c8c:	f7fd ff3a 	bl	8000b04 <HAL_GetTick>
 8002c90:	0002      	movs	r2, r0
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e152      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c9e:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d0f1      	beq.n	8002c8c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002ca8:	4b85      	ldr	r3, [pc, #532]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cac:	22f8      	movs	r2, #248	; 0xf8
 8002cae:	4393      	bics	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	00da      	lsls	r2, r3, #3
 8002cb8:	4b81      	ldr	r3, [pc, #516]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cbe:	e034      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	3305      	adds	r3, #5
 8002cc6:	d111      	bne.n	8002cec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002cc8:	4b7d      	ldr	r3, [pc, #500]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ccc:	4b7c      	ldr	r3, [pc, #496]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002cce:	2104      	movs	r1, #4
 8002cd0:	438a      	bics	r2, r1
 8002cd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002cd4:	4b7a      	ldr	r3, [pc, #488]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd8:	22f8      	movs	r2, #248	; 0xf8
 8002cda:	4393      	bics	r3, r2
 8002cdc:	0019      	movs	r1, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	00da      	lsls	r2, r3, #3
 8002ce4:	4b76      	ldr	r3, [pc, #472]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cea:	e01e      	b.n	8002d2a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cec:	4b74      	ldr	r3, [pc, #464]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf0:	4b73      	ldr	r3, [pc, #460]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002cf8:	4b71      	ldr	r3, [pc, #452]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cfc:	4b70      	ldr	r3, [pc, #448]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002cfe:	2101      	movs	r1, #1
 8002d00:	438a      	bics	r2, r1
 8002d02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d04:	f7fd fefe 	bl	8000b04 <HAL_GetTick>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d0e:	f7fd fef9 	bl	8000b04 <HAL_GetTick>
 8002d12:	0002      	movs	r2, r0
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e111      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d20:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d24:	2202      	movs	r2, #2
 8002d26:	4013      	ands	r3, r2
 8002d28:	d1f1      	bne.n	8002d0e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	4013      	ands	r3, r2
 8002d32:	d05c      	beq.n	8002dee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d34:	4b62      	ldr	r3, [pc, #392]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	220c      	movs	r2, #12
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	d00e      	beq.n	8002d5e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d40:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	220c      	movs	r2, #12
 8002d46:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d114      	bne.n	8002d76 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d4c:	4b5c      	ldr	r3, [pc, #368]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	23c0      	movs	r3, #192	; 0xc0
 8002d52:	025b      	lsls	r3, r3, #9
 8002d54:	401a      	ands	r2, r3
 8002d56:	23c0      	movs	r3, #192	; 0xc0
 8002d58:	025b      	lsls	r3, r3, #9
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d10b      	bne.n	8002d76 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d5e:	4b58      	ldr	r3, [pc, #352]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	025b      	lsls	r3, r3, #9
 8002d66:	4013      	ands	r3, r2
 8002d68:	d040      	beq.n	8002dec <HAL_RCC_OscConfig+0x5a8>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d03c      	beq.n	8002dec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0e6      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d01b      	beq.n	8002db6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d7e:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d82:	4b4f      	ldr	r3, [pc, #316]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002d84:	2180      	movs	r1, #128	; 0x80
 8002d86:	0249      	lsls	r1, r1, #9
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fd feba 	bl	8000b04 <HAL_GetTick>
 8002d90:	0003      	movs	r3, r0
 8002d92:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d96:	f7fd feb5 	bl	8000b04 <HAL_GetTick>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e0cd      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002da8:	4b45      	ldr	r3, [pc, #276]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	025b      	lsls	r3, r3, #9
 8002db0:	4013      	ands	r3, r2
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x552>
 8002db4:	e01b      	b.n	8002dee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002db6:	4b42      	ldr	r3, [pc, #264]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002dbc:	4943      	ldr	r1, [pc, #268]	; (8002ecc <HAL_RCC_OscConfig+0x688>)
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7fd fe9f 	bl	8000b04 <HAL_GetTick>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dcc:	f7fd fe9a 	bl	8000b04 <HAL_GetTick>
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e0b2      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002dde:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	025b      	lsls	r3, r3, #9
 8002de6:	4013      	ands	r3, r2
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x588>
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002dec:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d100      	bne.n	8002df8 <HAL_RCC_OscConfig+0x5b4>
 8002df6:	e0a4      	b.n	8002f42 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df8:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	220c      	movs	r2, #12
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d100      	bne.n	8002e06 <HAL_RCC_OscConfig+0x5c2>
 8002e04:	e078      	b.n	8002ef8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d14c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002e14:	492e      	ldr	r1, [pc, #184]	; (8002ed0 <HAL_RCC_OscConfig+0x68c>)
 8002e16:	400a      	ands	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fd fe73 	bl	8000b04 <HAL_GetTick>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e24:	f7fd fe6e 	bl	8000b04 <HAL_GetTick>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e086      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	2380      	movs	r3, #128	; 0x80
 8002e3c:	049b      	lsls	r3, r3, #18
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e42:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e46:	220f      	movs	r2, #15
 8002e48:	4393      	bics	r3, r2
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002e52:	430a      	orrs	r2, r1
 8002e54:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ed4 <HAL_RCC_OscConfig+0x690>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002e76:	2180      	movs	r1, #128	; 0x80
 8002e78:	0449      	lsls	r1, r1, #17
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7fd fe41 	bl	8000b04 <HAL_GetTick>
 8002e82:	0003      	movs	r3, r0
 8002e84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fd fe3c 	bl	8000b04 <HAL_GetTick>
 8002e8c:	0002      	movs	r2, r0
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e054      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	049b      	lsls	r3, r3, #18
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x644>
 8002ea6:	e04c      	b.n	8002f42 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <HAL_RCC_OscConfig+0x67c>)
 8002eae:	4908      	ldr	r1, [pc, #32]	; (8002ed0 <HAL_RCC_OscConfig+0x68c>)
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fd fe26 	bl	8000b04 <HAL_GetTick>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ebc:	e015      	b.n	8002eea <HAL_RCC_OscConfig+0x6a6>
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	00001388 	.word	0x00001388
 8002ec8:	efffffff 	.word	0xefffffff
 8002ecc:	fffeffff 	.word	0xfffeffff
 8002ed0:	feffffff 	.word	0xfeffffff
 8002ed4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fd fe14 	bl	8000b04 <HAL_GetTick>
 8002edc:	0002      	movs	r2, r0
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e02c      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eea:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_RCC_OscConfig+0x708>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	049b      	lsls	r3, r3, #18
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x694>
 8002ef6:	e024      	b.n	8002f42 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e01f      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <HAL_RCC_OscConfig+0x708>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <HAL_RCC_OscConfig+0x708>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	23c0      	movs	r3, #192	; 0xc0
 8002f14:	025b      	lsls	r3, r3, #9
 8002f16:	401a      	ands	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d10e      	bne.n	8002f3e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	220f      	movs	r2, #15
 8002f24:	401a      	ands	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d107      	bne.n	8002f3e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	23f0      	movs	r3, #240	; 0xf0
 8002f32:	039b      	lsls	r3, r3, #14
 8002f34:	401a      	ands	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	0018      	movs	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b008      	add	sp, #32
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000

08002f50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0bf      	b.n	80030e4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f64:	4b61      	ldr	r3, [pc, #388]	; (80030ec <HAL_RCC_ClockConfig+0x19c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d911      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b5e      	ldr	r3, [pc, #376]	; (80030ec <HAL_RCC_ClockConfig+0x19c>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2201      	movs	r2, #1
 8002f78:	4393      	bics	r3, r2
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	4b5b      	ldr	r3, [pc, #364]	; (80030ec <HAL_RCC_ClockConfig+0x19c>)
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f84:	4b59      	ldr	r3, [pc, #356]	; (80030ec <HAL_RCC_ClockConfig+0x19c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d001      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0a6      	b.n	80030e4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d015      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d006      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002faa:	4b51      	ldr	r3, [pc, #324]	; (80030f0 <HAL_RCC_ClockConfig+0x1a0>)
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	4b50      	ldr	r3, [pc, #320]	; (80030f0 <HAL_RCC_ClockConfig+0x1a0>)
 8002fb0:	21e0      	movs	r1, #224	; 0xe0
 8002fb2:	00c9      	lsls	r1, r1, #3
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b4d      	ldr	r3, [pc, #308]	; (80030f0 <HAL_RCC_ClockConfig+0x1a0>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	22f0      	movs	r2, #240	; 0xf0
 8002fbe:	4393      	bics	r3, r2
 8002fc0:	0019      	movs	r1, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	4b4a      	ldr	r3, [pc, #296]	; (80030f0 <HAL_RCC_ClockConfig+0x1a0>)
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d04c      	beq.n	8003070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b44      	ldr	r3, [pc, #272]	; (80030f0 <HAL_RCC_ClockConfig+0x1a0>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	029b      	lsls	r3, r3, #10
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d120      	bne.n	800302c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07a      	b.n	80030e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d107      	bne.n	8003006 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff6:	4b3e      	ldr	r3, [pc, #248]	; (80030f0 <HAL_RCC_ClockConfig+0x1a0>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	049b      	lsls	r3, r3, #18
 8002ffe:	4013      	ands	r3, r2
 8003000:	d114      	bne.n	800302c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e06e      	b.n	80030e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b03      	cmp	r3, #3
 800300c:	d107      	bne.n	800301e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800300e:	4b38      	ldr	r3, [pc, #224]	; (80030f0 <HAL_RCC_ClockConfig+0x1a0>)
 8003010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	025b      	lsls	r3, r3, #9
 8003016:	4013      	ands	r3, r2
 8003018:	d108      	bne.n	800302c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e062      	b.n	80030e4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301e:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <HAL_RCC_ClockConfig+0x1a0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2202      	movs	r2, #2
 8003024:	4013      	ands	r3, r2
 8003026:	d101      	bne.n	800302c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e05b      	b.n	80030e4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302c:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <HAL_RCC_ClockConfig+0x1a0>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2203      	movs	r2, #3
 8003032:	4393      	bics	r3, r2
 8003034:	0019      	movs	r1, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <HAL_RCC_ClockConfig+0x1a0>)
 800303c:	430a      	orrs	r2, r1
 800303e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003040:	f7fd fd60 	bl	8000b04 <HAL_GetTick>
 8003044:	0003      	movs	r3, r0
 8003046:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003048:	e009      	b.n	800305e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304a:	f7fd fd5b 	bl	8000b04 <HAL_GetTick>
 800304e:	0002      	movs	r2, r0
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	4a27      	ldr	r2, [pc, #156]	; (80030f4 <HAL_RCC_ClockConfig+0x1a4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d901      	bls.n	800305e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e042      	b.n	80030e4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <HAL_RCC_ClockConfig+0x1a0>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	220c      	movs	r2, #12
 8003064:	401a      	ands	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	429a      	cmp	r2, r3
 800306e:	d1ec      	bne.n	800304a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003070:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <HAL_RCC_ClockConfig+0x19c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2201      	movs	r2, #1
 8003076:	4013      	ands	r3, r2
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d211      	bcs.n	80030a2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_RCC_ClockConfig+0x19c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2201      	movs	r2, #1
 8003084:	4393      	bics	r3, r2
 8003086:	0019      	movs	r1, r3
 8003088:	4b18      	ldr	r3, [pc, #96]	; (80030ec <HAL_RCC_ClockConfig+0x19c>)
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003090:	4b16      	ldr	r3, [pc, #88]	; (80030ec <HAL_RCC_ClockConfig+0x19c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2201      	movs	r2, #1
 8003096:	4013      	ands	r3, r2
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e020      	b.n	80030e4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2204      	movs	r2, #4
 80030a8:	4013      	ands	r3, r2
 80030aa:	d009      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030ac:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <HAL_RCC_ClockConfig+0x1a0>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <HAL_RCC_ClockConfig+0x1a8>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	0019      	movs	r1, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <HAL_RCC_ClockConfig+0x1a0>)
 80030bc:	430a      	orrs	r2, r1
 80030be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030c0:	f000 f820 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 80030c4:	0001      	movs	r1, r0
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <HAL_RCC_ClockConfig+0x1a0>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	220f      	movs	r2, #15
 80030ce:	4013      	ands	r3, r2
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <HAL_RCC_ClockConfig+0x1ac>)
 80030d2:	5cd3      	ldrb	r3, [r2, r3]
 80030d4:	000a      	movs	r2, r1
 80030d6:	40da      	lsrs	r2, r3
 80030d8:	4b09      	ldr	r3, [pc, #36]	; (8003100 <HAL_RCC_ClockConfig+0x1b0>)
 80030da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80030dc:	2003      	movs	r0, #3
 80030de:	f7fd fccb 	bl	8000a78 <HAL_InitTick>
  
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	0018      	movs	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b004      	add	sp, #16
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40022000 	.word	0x40022000
 80030f0:	40021000 	.word	0x40021000
 80030f4:	00001388 	.word	0x00001388
 80030f8:	fffff8ff 	.word	0xfffff8ff
 80030fc:	08003f84 	.word	0x08003f84
 8003100:	20000000 	.word	0x20000000

08003104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003104:	b590      	push	{r4, r7, lr}
 8003106:	b08f      	sub	sp, #60	; 0x3c
 8003108:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800310a:	2314      	movs	r3, #20
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	4a38      	ldr	r2, [pc, #224]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xec>)
 8003110:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003112:	c313      	stmia	r3!, {r0, r1, r4}
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003118:	1d3b      	adds	r3, r7, #4
 800311a:	4a36      	ldr	r2, [pc, #216]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xf0>)
 800311c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800311e:	c313      	stmia	r3!, {r0, r1, r4}
 8003120:	6812      	ldr	r2, [r2, #0]
 8003122:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003128:	2300      	movs	r3, #0
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
 800312c:	2300      	movs	r3, #0
 800312e:	637b      	str	r3, [r7, #52]	; 0x34
 8003130:	2300      	movs	r3, #0
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003138:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800313e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003140:	220c      	movs	r2, #12
 8003142:	4013      	ands	r3, r2
 8003144:	2b0c      	cmp	r3, #12
 8003146:	d047      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0xd4>
 8003148:	d849      	bhi.n	80031de <HAL_RCC_GetSysClockFreq+0xda>
 800314a:	2b04      	cmp	r3, #4
 800314c:	d002      	beq.n	8003154 <HAL_RCC_GetSysClockFreq+0x50>
 800314e:	2b08      	cmp	r3, #8
 8003150:	d003      	beq.n	800315a <HAL_RCC_GetSysClockFreq+0x56>
 8003152:	e044      	b.n	80031de <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003154:	4b29      	ldr	r3, [pc, #164]	; (80031fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003156:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003158:	e044      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800315a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315c:	0c9b      	lsrs	r3, r3, #18
 800315e:	220f      	movs	r2, #15
 8003160:	4013      	ands	r3, r2
 8003162:	2214      	movs	r2, #20
 8003164:	18ba      	adds	r2, r7, r2
 8003166:	5cd3      	ldrb	r3, [r2, r3]
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800316a:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	220f      	movs	r2, #15
 8003170:	4013      	ands	r3, r2
 8003172:	1d3a      	adds	r2, r7, #4
 8003174:	5cd3      	ldrb	r3, [r2, r3]
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800317a:	23c0      	movs	r3, #192	; 0xc0
 800317c:	025b      	lsls	r3, r3, #9
 800317e:	401a      	ands	r2, r3
 8003180:	2380      	movs	r3, #128	; 0x80
 8003182:	025b      	lsls	r3, r3, #9
 8003184:	429a      	cmp	r2, r3
 8003186:	d109      	bne.n	800319c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800318a:	481c      	ldr	r0, [pc, #112]	; (80031fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800318c:	f7fc ffbc 	bl	8000108 <__udivsi3>
 8003190:	0003      	movs	r3, r0
 8003192:	001a      	movs	r2, r3
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	4353      	muls	r3, r2
 8003198:	637b      	str	r3, [r7, #52]	; 0x34
 800319a:	e01a      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800319c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800319e:	23c0      	movs	r3, #192	; 0xc0
 80031a0:	025b      	lsls	r3, r3, #9
 80031a2:	401a      	ands	r2, r3
 80031a4:	23c0      	movs	r3, #192	; 0xc0
 80031a6:	025b      	lsls	r3, r3, #9
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d109      	bne.n	80031c0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ae:	4814      	ldr	r0, [pc, #80]	; (8003200 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031b0:	f7fc ffaa 	bl	8000108 <__udivsi3>
 80031b4:	0003      	movs	r3, r0
 80031b6:	001a      	movs	r2, r3
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	4353      	muls	r3, r2
 80031bc:	637b      	str	r3, [r7, #52]	; 0x34
 80031be:	e008      	b.n	80031d2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031c2:	4810      	ldr	r0, [pc, #64]	; (8003204 <HAL_RCC_GetSysClockFreq+0x100>)
 80031c4:	f7fc ffa0 	bl	8000108 <__udivsi3>
 80031c8:	0003      	movs	r3, r0
 80031ca:	001a      	movs	r2, r3
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	4353      	muls	r3, r2
 80031d0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80031d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031d6:	e005      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80031d8:	4b09      	ldr	r3, [pc, #36]	; (8003200 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031dc:	e002      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_GetSysClockFreq+0x100>)
 80031e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031e2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b00f      	add	sp, #60	; 0x3c
 80031ec:	bd90      	pop	{r4, r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	08003f64 	.word	0x08003f64
 80031f4:	08003f74 	.word	0x08003f74
 80031f8:	40021000 	.word	0x40021000
 80031fc:	00f42400 	.word	0x00f42400
 8003200:	02dc6c00 	.word	0x02dc6c00
 8003204:	007a1200 	.word	0x007a1200

08003208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800320c:	4b02      	ldr	r3, [pc, #8]	; (8003218 <HAL_RCC_GetHCLKFreq+0x10>)
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	20000000 	.word	0x20000000

0800321c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003220:	f7ff fff2 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8003224:	0001      	movs	r1, r0
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	2207      	movs	r2, #7
 800322e:	4013      	ands	r3, r2
 8003230:	4a04      	ldr	r2, [pc, #16]	; (8003244 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003232:	5cd3      	ldrb	r3, [r2, r3]
 8003234:	40d9      	lsrs	r1, r3
 8003236:	000b      	movs	r3, r1
}    
 8003238:	0018      	movs	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	40021000 	.word	0x40021000
 8003244:	08003f94 	.word	0x08003f94

08003248 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	025b      	lsls	r3, r3, #9
 8003260:	4013      	ands	r3, r2
 8003262:	d100      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003264:	e08e      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003266:	2017      	movs	r0, #23
 8003268:	183b      	adds	r3, r7, r0
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326e:	4b67      	ldr	r3, [pc, #412]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003270:	69da      	ldr	r2, [r3, #28]
 8003272:	2380      	movs	r3, #128	; 0x80
 8003274:	055b      	lsls	r3, r3, #21
 8003276:	4013      	ands	r3, r2
 8003278:	d110      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800327a:	4b64      	ldr	r3, [pc, #400]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003280:	2180      	movs	r1, #128	; 0x80
 8003282:	0549      	lsls	r1, r1, #21
 8003284:	430a      	orrs	r2, r1
 8003286:	61da      	str	r2, [r3, #28]
 8003288:	4b60      	ldr	r3, [pc, #384]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800328a:	69da      	ldr	r2, [r3, #28]
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	055b      	lsls	r3, r3, #21
 8003290:	4013      	ands	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003296:	183b      	adds	r3, r7, r0
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	4b5c      	ldr	r3, [pc, #368]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	4013      	ands	r3, r2
 80032a6:	d11a      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032a8:	4b59      	ldr	r3, [pc, #356]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b58      	ldr	r3, [pc, #352]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	0049      	lsls	r1, r1, #1
 80032b2:	430a      	orrs	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b6:	f7fd fc25 	bl	8000b04 <HAL_GetTick>
 80032ba:	0003      	movs	r3, r0
 80032bc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	e008      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c0:	f7fd fc20 	bl	8000b04 <HAL_GetTick>
 80032c4:	0002      	movs	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e097      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d2:	4b4f      	ldr	r3, [pc, #316]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	2380      	movs	r3, #128	; 0x80
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4013      	ands	r3, r2
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032de:	4b4b      	ldr	r3, [pc, #300]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032e0:	6a1a      	ldr	r2, [r3, #32]
 80032e2:	23c0      	movs	r3, #192	; 0xc0
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4013      	ands	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d034      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	23c0      	movs	r3, #192	; 0xc0
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4013      	ands	r3, r2
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d02c      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003300:	4b42      	ldr	r3, [pc, #264]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4a43      	ldr	r2, [pc, #268]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003306:	4013      	ands	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800330a:	4b40      	ldr	r3, [pc, #256]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800330c:	6a1a      	ldr	r2, [r3, #32]
 800330e:	4b3f      	ldr	r3, [pc, #252]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003310:	2180      	movs	r1, #128	; 0x80
 8003312:	0249      	lsls	r1, r1, #9
 8003314:	430a      	orrs	r2, r1
 8003316:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003318:	4b3c      	ldr	r3, [pc, #240]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800331a:	6a1a      	ldr	r2, [r3, #32]
 800331c:	4b3b      	ldr	r3, [pc, #236]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800331e:	493e      	ldr	r1, [pc, #248]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003320:	400a      	ands	r2, r1
 8003322:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003324:	4b39      	ldr	r3, [pc, #228]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	4013      	ands	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fd fbe7 	bl	8000b04 <HAL_GetTick>
 8003336:	0003      	movs	r3, r0
 8003338:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333a:	e009      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fd fbe2 	bl	8000b04 <HAL_GetTick>
 8003340:	0002      	movs	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	4a35      	ldr	r2, [pc, #212]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e058      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003350:	4b2e      	ldr	r3, [pc, #184]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	2202      	movs	r2, #2
 8003356:	4013      	ands	r3, r2
 8003358:	d0f0      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800335a:	4b2c      	ldr	r3, [pc, #176]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4a2d      	ldr	r2, [pc, #180]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003360:	4013      	ands	r3, r2
 8003362:	0019      	movs	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	4b28      	ldr	r3, [pc, #160]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800336a:	430a      	orrs	r2, r1
 800336c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800336e:	2317      	movs	r3, #23
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d105      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003378:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	4b23      	ldr	r3, [pc, #140]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800337e:	4928      	ldr	r1, [pc, #160]	; (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003380:	400a      	ands	r2, r1
 8003382:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2201      	movs	r2, #1
 800338a:	4013      	ands	r3, r2
 800338c:	d009      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800338e:	4b1f      	ldr	r3, [pc, #124]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	2203      	movs	r2, #3
 8003394:	4393      	bics	r3, r2
 8003396:	0019      	movs	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800339e:	430a      	orrs	r2, r1
 80033a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2220      	movs	r2, #32
 80033a8:	4013      	ands	r3, r2
 80033aa:	d009      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ac:	4b17      	ldr	r3, [pc, #92]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	2210      	movs	r2, #16
 80033b2:	4393      	bics	r3, r2
 80033b4:	0019      	movs	r1, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	4b14      	ldr	r3, [pc, #80]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80033bc:	430a      	orrs	r2, r1
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	029b      	lsls	r3, r3, #10
 80033c8:	4013      	ands	r3, r2
 80033ca:	d009      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033cc:	4b0f      	ldr	r3, [pc, #60]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	2280      	movs	r2, #128	; 0x80
 80033d2:	4393      	bics	r3, r2
 80033d4:	0019      	movs	r1, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	4b0c      	ldr	r3, [pc, #48]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80033dc:	430a      	orrs	r2, r1
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4013      	ands	r3, r2
 80033ea:	d009      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033ec:	4b07      	ldr	r3, [pc, #28]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	2240      	movs	r2, #64	; 0x40
 80033f2:	4393      	bics	r3, r2
 80033f4:	0019      	movs	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	4b04      	ldr	r3, [pc, #16]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80033fc:	430a      	orrs	r2, r1
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	0018      	movs	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	b006      	add	sp, #24
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			; (mov r8, r8)
 800340c:	40021000 	.word	0x40021000
 8003410:	40007000 	.word	0x40007000
 8003414:	fffffcff 	.word	0xfffffcff
 8003418:	fffeffff 	.word	0xfffeffff
 800341c:	00001388 	.word	0x00001388
 8003420:	efffffff 	.word	0xefffffff

08003424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e042      	b.n	80034bc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	223d      	movs	r2, #61	; 0x3d
 800343a:	5c9b      	ldrb	r3, [r3, r2]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d107      	bne.n	8003452 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	223c      	movs	r2, #60	; 0x3c
 8003446:	2100      	movs	r1, #0
 8003448:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	0018      	movs	r0, r3
 800344e:	f7fd fa17 	bl	8000880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	223d      	movs	r2, #61	; 0x3d
 8003456:	2102      	movs	r1, #2
 8003458:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3304      	adds	r3, #4
 8003462:	0019      	movs	r1, r3
 8003464:	0010      	movs	r0, r2
 8003466:	f000 f96b 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2246      	movs	r2, #70	; 0x46
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	223e      	movs	r2, #62	; 0x3e
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	223f      	movs	r2, #63	; 0x3f
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2240      	movs	r2, #64	; 0x40
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2241      	movs	r2, #65	; 0x41
 800348e:	2101      	movs	r1, #1
 8003490:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2242      	movs	r2, #66	; 0x42
 8003496:	2101      	movs	r1, #1
 8003498:	5499      	strb	r1, [r3, r2]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2243      	movs	r2, #67	; 0x43
 800349e:	2101      	movs	r1, #1
 80034a0:	5499      	strb	r1, [r3, r2]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2244      	movs	r2, #68	; 0x44
 80034a6:	2101      	movs	r1, #1
 80034a8:	5499      	strb	r1, [r3, r2]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2245      	movs	r2, #69	; 0x45
 80034ae:	2101      	movs	r1, #1
 80034b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	223d      	movs	r2, #61	; 0x3d
 80034b6:	2101      	movs	r1, #1
 80034b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	0018      	movs	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2202      	movs	r2, #2
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d124      	bne.n	8003524 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2202      	movs	r2, #2
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d11d      	bne.n	8003524 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2203      	movs	r2, #3
 80034ee:	4252      	negs	r2, r2
 80034f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	2203      	movs	r2, #3
 8003500:	4013      	ands	r3, r2
 8003502:	d004      	beq.n	800350e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	0018      	movs	r0, r3
 8003508:	f000 f902 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 800350c:	e007      	b.n	800351e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	0018      	movs	r0, r3
 8003512:	f000 f8f5 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	0018      	movs	r0, r3
 800351a:	f000 f901 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	2204      	movs	r2, #4
 800352c:	4013      	ands	r3, r2
 800352e:	2b04      	cmp	r3, #4
 8003530:	d125      	bne.n	800357e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2204      	movs	r2, #4
 800353a:	4013      	ands	r3, r2
 800353c:	2b04      	cmp	r3, #4
 800353e:	d11e      	bne.n	800357e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2205      	movs	r2, #5
 8003546:	4252      	negs	r2, r2
 8003548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2202      	movs	r2, #2
 800354e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	23c0      	movs	r3, #192	; 0xc0
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4013      	ands	r3, r2
 800355c:	d004      	beq.n	8003568 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0018      	movs	r0, r3
 8003562:	f000 f8d5 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 8003566:	e007      	b.n	8003578 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	0018      	movs	r0, r3
 800356c:	f000 f8c8 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	0018      	movs	r0, r3
 8003574:	f000 f8d4 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2208      	movs	r2, #8
 8003586:	4013      	ands	r3, r2
 8003588:	2b08      	cmp	r3, #8
 800358a:	d124      	bne.n	80035d6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2208      	movs	r2, #8
 8003594:	4013      	ands	r3, r2
 8003596:	2b08      	cmp	r3, #8
 8003598:	d11d      	bne.n	80035d6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2209      	movs	r2, #9
 80035a0:	4252      	negs	r2, r2
 80035a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2204      	movs	r2, #4
 80035a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	2203      	movs	r2, #3
 80035b2:	4013      	ands	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f000 f8a9 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 80035be:	e007      	b.n	80035d0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	0018      	movs	r0, r3
 80035c4:	f000 f89c 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f000 f8a8 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	2210      	movs	r2, #16
 80035de:	4013      	ands	r3, r2
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	d125      	bne.n	8003630 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	2210      	movs	r2, #16
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b10      	cmp	r3, #16
 80035f0:	d11e      	bne.n	8003630 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2211      	movs	r2, #17
 80035f8:	4252      	negs	r2, r2
 80035fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2208      	movs	r2, #8
 8003600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69da      	ldr	r2, [r3, #28]
 8003608:	23c0      	movs	r3, #192	; 0xc0
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4013      	ands	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	0018      	movs	r0, r3
 8003614:	f000 f87c 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 8003618:	e007      	b.n	800362a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	0018      	movs	r0, r3
 800361e:	f000 f86f 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	0018      	movs	r0, r3
 8003626:	f000 f87b 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2201      	movs	r2, #1
 8003638:	4013      	ands	r3, r2
 800363a:	2b01      	cmp	r3, #1
 800363c:	d10f      	bne.n	800365e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	4013      	ands	r3, r2
 8003648:	2b01      	cmp	r3, #1
 800364a:	d108      	bne.n	800365e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2202      	movs	r2, #2
 8003652:	4252      	negs	r2, r2
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0018      	movs	r0, r3
 800365a:	f000 f849 	bl	80036f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	4013      	ands	r3, r2
 8003668:	2b80      	cmp	r3, #128	; 0x80
 800366a:	d10f      	bne.n	800368c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2280      	movs	r2, #128	; 0x80
 8003674:	4013      	ands	r3, r2
 8003676:	2b80      	cmp	r3, #128	; 0x80
 8003678:	d108      	bne.n	800368c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2281      	movs	r2, #129	; 0x81
 8003680:	4252      	negs	r2, r2
 8003682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	0018      	movs	r0, r3
 8003688:	f000 f8d8 	bl	800383c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2240      	movs	r2, #64	; 0x40
 8003694:	4013      	ands	r3, r2
 8003696:	2b40      	cmp	r3, #64	; 0x40
 8003698:	d10f      	bne.n	80036ba <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2240      	movs	r2, #64	; 0x40
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b40      	cmp	r3, #64	; 0x40
 80036a6:	d108      	bne.n	80036ba <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2241      	movs	r2, #65	; 0x41
 80036ae:	4252      	negs	r2, r2
 80036b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 f83b 	bl	8003730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	2220      	movs	r2, #32
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d10f      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d108      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2221      	movs	r2, #33	; 0x21
 80036dc:	4252      	negs	r2, r2
 80036de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	0018      	movs	r0, r3
 80036e4:	f000 f8a2 	bl	800382c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b002      	add	sp, #8
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003718:	46c0      	nop			; (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b002      	add	sp, #8
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b002      	add	sp, #8
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}

08003740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a30      	ldr	r2, [pc, #192]	; (8003814 <TIM_Base_SetConfig+0xd4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d008      	beq.n	800376a <TIM_Base_SetConfig+0x2a>
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	05db      	lsls	r3, r3, #23
 800375e:	429a      	cmp	r2, r3
 8003760:	d003      	beq.n	800376a <TIM_Base_SetConfig+0x2a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <TIM_Base_SetConfig+0xd8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d108      	bne.n	800377c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2270      	movs	r2, #112	; 0x70
 800376e:	4393      	bics	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a25      	ldr	r2, [pc, #148]	; (8003814 <TIM_Base_SetConfig+0xd4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d014      	beq.n	80037ae <TIM_Base_SetConfig+0x6e>
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	05db      	lsls	r3, r3, #23
 800378a:	429a      	cmp	r2, r3
 800378c:	d00f      	beq.n	80037ae <TIM_Base_SetConfig+0x6e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a21      	ldr	r2, [pc, #132]	; (8003818 <TIM_Base_SetConfig+0xd8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00b      	beq.n	80037ae <TIM_Base_SetConfig+0x6e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a20      	ldr	r2, [pc, #128]	; (800381c <TIM_Base_SetConfig+0xdc>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d007      	beq.n	80037ae <TIM_Base_SetConfig+0x6e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1f      	ldr	r2, [pc, #124]	; (8003820 <TIM_Base_SetConfig+0xe0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d003      	beq.n	80037ae <TIM_Base_SetConfig+0x6e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <TIM_Base_SetConfig+0xe4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d108      	bne.n	80037c0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <TIM_Base_SetConfig+0xe8>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2280      	movs	r2, #128	; 0x80
 80037c4:	4393      	bics	r3, r2
 80037c6:	001a      	movs	r2, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a0a      	ldr	r2, [pc, #40]	; (8003814 <TIM_Base_SetConfig+0xd4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d007      	beq.n	80037fe <TIM_Base_SetConfig+0xbe>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a0b      	ldr	r2, [pc, #44]	; (8003820 <TIM_Base_SetConfig+0xe0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d003      	beq.n	80037fe <TIM_Base_SetConfig+0xbe>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a0a      	ldr	r2, [pc, #40]	; (8003824 <TIM_Base_SetConfig+0xe4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d103      	bne.n	8003806 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	615a      	str	r2, [r3, #20]
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	b004      	add	sp, #16
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40000400 	.word	0x40000400
 800381c:	40002000 	.word	0x40002000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800
 8003828:	fffffcff 	.word	0xfffffcff

0800382c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003834:	46c0      	nop			; (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	b002      	add	sp, #8
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003844:	46c0      	nop			; (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	b002      	add	sp, #8
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e044      	b.n	80038e8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003862:	2b00      	cmp	r3, #0
 8003864:	d107      	bne.n	8003876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2274      	movs	r2, #116	; 0x74
 800386a:	2100      	movs	r1, #0
 800386c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	0018      	movs	r0, r3
 8003872:	f7fd f85d 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2224      	movs	r2, #36	; 0x24
 800387a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2101      	movs	r1, #1
 8003888:	438a      	bics	r2, r1
 800388a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	0018      	movs	r0, r3
 8003890:	f000 f830 	bl	80038f4 <UART_SetConfig>
 8003894:	0003      	movs	r3, r0
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e024      	b.n	80038e8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 f963 	bl	8003b74 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	490d      	ldr	r1, [pc, #52]	; (80038f0 <HAL_UART_Init+0xa4>)
 80038ba:	400a      	ands	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	212a      	movs	r1, #42	; 0x2a
 80038ca:	438a      	bics	r2, r1
 80038cc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2101      	movs	r1, #1
 80038da:	430a      	orrs	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	0018      	movs	r0, r3
 80038e2:	f000 f9fb 	bl	8003cdc <UART_CheckIdleState>
 80038e6:	0003      	movs	r3, r0
}
 80038e8:	0018      	movs	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b002      	add	sp, #8
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	ffffb7ff 	.word	0xffffb7ff

080038f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038fc:	231e      	movs	r3, #30
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	2200      	movs	r2, #0
 8003902:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	431a      	orrs	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a8d      	ldr	r2, [pc, #564]	; (8003b58 <UART_SetConfig+0x264>)
 8003924:	4013      	ands	r3, r2
 8003926:	0019      	movs	r1, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	430a      	orrs	r2, r1
 8003930:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4a88      	ldr	r2, [pc, #544]	; (8003b5c <UART_SetConfig+0x268>)
 800393a:	4013      	ands	r3, r2
 800393c:	0019      	movs	r1, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a7f      	ldr	r2, [pc, #508]	; (8003b60 <UART_SetConfig+0x26c>)
 8003962:	4013      	ands	r3, r2
 8003964:	0019      	movs	r1, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	430a      	orrs	r2, r1
 800396e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a7b      	ldr	r2, [pc, #492]	; (8003b64 <UART_SetConfig+0x270>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d127      	bne.n	80039ca <UART_SetConfig+0xd6>
 800397a:	4b7b      	ldr	r3, [pc, #492]	; (8003b68 <UART_SetConfig+0x274>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	2203      	movs	r2, #3
 8003980:	4013      	ands	r3, r2
 8003982:	2b03      	cmp	r3, #3
 8003984:	d00d      	beq.n	80039a2 <UART_SetConfig+0xae>
 8003986:	d81b      	bhi.n	80039c0 <UART_SetConfig+0xcc>
 8003988:	2b02      	cmp	r3, #2
 800398a:	d014      	beq.n	80039b6 <UART_SetConfig+0xc2>
 800398c:	d818      	bhi.n	80039c0 <UART_SetConfig+0xcc>
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <UART_SetConfig+0xa4>
 8003992:	2b01      	cmp	r3, #1
 8003994:	d00a      	beq.n	80039ac <UART_SetConfig+0xb8>
 8003996:	e013      	b.n	80039c0 <UART_SetConfig+0xcc>
 8003998:	231f      	movs	r3, #31
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	e021      	b.n	80039e6 <UART_SetConfig+0xf2>
 80039a2:	231f      	movs	r3, #31
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	2202      	movs	r2, #2
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	e01c      	b.n	80039e6 <UART_SetConfig+0xf2>
 80039ac:	231f      	movs	r3, #31
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	2204      	movs	r2, #4
 80039b2:	701a      	strb	r2, [r3, #0]
 80039b4:	e017      	b.n	80039e6 <UART_SetConfig+0xf2>
 80039b6:	231f      	movs	r3, #31
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	2208      	movs	r2, #8
 80039bc:	701a      	strb	r2, [r3, #0]
 80039be:	e012      	b.n	80039e6 <UART_SetConfig+0xf2>
 80039c0:	231f      	movs	r3, #31
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	2210      	movs	r2, #16
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	e00d      	b.n	80039e6 <UART_SetConfig+0xf2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a67      	ldr	r2, [pc, #412]	; (8003b6c <UART_SetConfig+0x278>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d104      	bne.n	80039de <UART_SetConfig+0xea>
 80039d4:	231f      	movs	r3, #31
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	e003      	b.n	80039e6 <UART_SetConfig+0xf2>
 80039de:	231f      	movs	r3, #31
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	2210      	movs	r2, #16
 80039e4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69da      	ldr	r2, [r3, #28]
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d15d      	bne.n	8003aae <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80039f2:	231f      	movs	r3, #31
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	d015      	beq.n	8003a28 <UART_SetConfig+0x134>
 80039fc:	dc18      	bgt.n	8003a30 <UART_SetConfig+0x13c>
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d00d      	beq.n	8003a1e <UART_SetConfig+0x12a>
 8003a02:	dc15      	bgt.n	8003a30 <UART_SetConfig+0x13c>
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <UART_SetConfig+0x11a>
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d005      	beq.n	8003a18 <UART_SetConfig+0x124>
 8003a0c:	e010      	b.n	8003a30 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a0e:	f7ff fc05 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 8003a12:	0003      	movs	r3, r0
 8003a14:	61bb      	str	r3, [r7, #24]
        break;
 8003a16:	e012      	b.n	8003a3e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a18:	4b55      	ldr	r3, [pc, #340]	; (8003b70 <UART_SetConfig+0x27c>)
 8003a1a:	61bb      	str	r3, [r7, #24]
        break;
 8003a1c:	e00f      	b.n	8003a3e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1e:	f7ff fb71 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 8003a22:	0003      	movs	r3, r0
 8003a24:	61bb      	str	r3, [r7, #24]
        break;
 8003a26:	e00a      	b.n	8003a3e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	021b      	lsls	r3, r3, #8
 8003a2c:	61bb      	str	r3, [r7, #24]
        break;
 8003a2e:	e006      	b.n	8003a3e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a34:	231e      	movs	r3, #30
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]
        break;
 8003a3c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d100      	bne.n	8003a46 <UART_SetConfig+0x152>
 8003a44:	e07b      	b.n	8003b3e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	005a      	lsls	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	085b      	lsrs	r3, r3, #1
 8003a50:	18d2      	adds	r2, r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	0019      	movs	r1, r3
 8003a58:	0010      	movs	r0, r2
 8003a5a:	f7fc fb55 	bl	8000108 <__udivsi3>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b0f      	cmp	r3, #15
 8003a68:	d91c      	bls.n	8003aa4 <UART_SetConfig+0x1b0>
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	025b      	lsls	r3, r3, #9
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d217      	bcs.n	8003aa4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	200e      	movs	r0, #14
 8003a7a:	183b      	adds	r3, r7, r0
 8003a7c:	210f      	movs	r1, #15
 8003a7e:	438a      	bics	r2, r1
 8003a80:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2207      	movs	r2, #7
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	b299      	uxth	r1, r3
 8003a8e:	183b      	adds	r3, r7, r0
 8003a90:	183a      	adds	r2, r7, r0
 8003a92:	8812      	ldrh	r2, [r2, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	183a      	adds	r2, r7, r0
 8003a9e:	8812      	ldrh	r2, [r2, #0]
 8003aa0:	60da      	str	r2, [r3, #12]
 8003aa2:	e04c      	b.n	8003b3e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003aa4:	231e      	movs	r3, #30
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]
 8003aac:	e047      	b.n	8003b3e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aae:	231f      	movs	r3, #31
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d015      	beq.n	8003ae4 <UART_SetConfig+0x1f0>
 8003ab8:	dc18      	bgt.n	8003aec <UART_SetConfig+0x1f8>
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d00d      	beq.n	8003ada <UART_SetConfig+0x1e6>
 8003abe:	dc15      	bgt.n	8003aec <UART_SetConfig+0x1f8>
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <UART_SetConfig+0x1d6>
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d005      	beq.n	8003ad4 <UART_SetConfig+0x1e0>
 8003ac8:	e010      	b.n	8003aec <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aca:	f7ff fba7 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	61bb      	str	r3, [r7, #24]
        break;
 8003ad2:	e012      	b.n	8003afa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad4:	4b26      	ldr	r3, [pc, #152]	; (8003b70 <UART_SetConfig+0x27c>)
 8003ad6:	61bb      	str	r3, [r7, #24]
        break;
 8003ad8:	e00f      	b.n	8003afa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ada:	f7ff fb13 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 8003ade:	0003      	movs	r3, r0
 8003ae0:	61bb      	str	r3, [r7, #24]
        break;
 8003ae2:	e00a      	b.n	8003afa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	61bb      	str	r3, [r7, #24]
        break;
 8003aea:	e006      	b.n	8003afa <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003af0:	231e      	movs	r3, #30
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
        break;
 8003af8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01e      	beq.n	8003b3e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	085a      	lsrs	r2, r3, #1
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	18d2      	adds	r2, r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	0019      	movs	r1, r3
 8003b10:	0010      	movs	r0, r2
 8003b12:	f7fc faf9 	bl	8000108 <__udivsi3>
 8003b16:	0003      	movs	r3, r0
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	2b0f      	cmp	r3, #15
 8003b20:	d909      	bls.n	8003b36 <UART_SetConfig+0x242>
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	2380      	movs	r3, #128	; 0x80
 8003b26:	025b      	lsls	r3, r3, #9
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d204      	bcs.n	8003b36 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	60da      	str	r2, [r3, #12]
 8003b34:	e003      	b.n	8003b3e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003b36:	231e      	movs	r3, #30
 8003b38:	18fb      	adds	r3, r7, r3
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b4a:	231e      	movs	r3, #30
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	781b      	ldrb	r3, [r3, #0]
}
 8003b50:	0018      	movs	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b008      	add	sp, #32
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	efff69f3 	.word	0xefff69f3
 8003b5c:	ffffcfff 	.word	0xffffcfff
 8003b60:	fffff4ff 	.word	0xfffff4ff
 8003b64:	40013800 	.word	0x40013800
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	40004400 	.word	0x40004400
 8003b70:	007a1200 	.word	0x007a1200

08003b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	2201      	movs	r2, #1
 8003b82:	4013      	ands	r3, r2
 8003b84:	d00b      	beq.n	8003b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4a4a      	ldr	r2, [pc, #296]	; (8003cb8 <UART_AdvFeatureConfig+0x144>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	0019      	movs	r1, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d00b      	beq.n	8003bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4a43      	ldr	r2, [pc, #268]	; (8003cbc <UART_AdvFeatureConfig+0x148>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d00b      	beq.n	8003be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	4a3b      	ldr	r2, [pc, #236]	; (8003cc0 <UART_AdvFeatureConfig+0x14c>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	0019      	movs	r1, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	2208      	movs	r2, #8
 8003be8:	4013      	ands	r3, r2
 8003bea:	d00b      	beq.n	8003c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	4a34      	ldr	r2, [pc, #208]	; (8003cc4 <UART_AdvFeatureConfig+0x150>)
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	2210      	movs	r2, #16
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d00b      	beq.n	8003c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	4a2c      	ldr	r2, [pc, #176]	; (8003cc8 <UART_AdvFeatureConfig+0x154>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	d00b      	beq.n	8003c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	4a25      	ldr	r2, [pc, #148]	; (8003ccc <UART_AdvFeatureConfig+0x158>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	2240      	movs	r2, #64	; 0x40
 8003c4e:	4013      	ands	r3, r2
 8003c50:	d01d      	beq.n	8003c8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	4a1d      	ldr	r2, [pc, #116]	; (8003cd0 <UART_AdvFeatureConfig+0x15c>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	035b      	lsls	r3, r3, #13
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d10b      	bne.n	8003c8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4a15      	ldr	r2, [pc, #84]	; (8003cd4 <UART_AdvFeatureConfig+0x160>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	0019      	movs	r1, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	2280      	movs	r2, #128	; 0x80
 8003c94:	4013      	ands	r3, r2
 8003c96:	d00b      	beq.n	8003cb0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <UART_AdvFeatureConfig+0x164>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	0019      	movs	r1, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]
  }
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b002      	add	sp, #8
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	fffdffff 	.word	0xfffdffff
 8003cbc:	fffeffff 	.word	0xfffeffff
 8003cc0:	fffbffff 	.word	0xfffbffff
 8003cc4:	ffff7fff 	.word	0xffff7fff
 8003cc8:	ffffefff 	.word	0xffffefff
 8003ccc:	ffffdfff 	.word	0xffffdfff
 8003cd0:	ffefffff 	.word	0xffefffff
 8003cd4:	ff9fffff 	.word	0xff9fffff
 8003cd8:	fff7ffff 	.word	0xfff7ffff

08003cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2280      	movs	r2, #128	; 0x80
 8003ce8:	2100      	movs	r1, #0
 8003cea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cec:	f7fc ff0a 	bl	8000b04 <HAL_GetTick>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d10c      	bne.n	8003d1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2280      	movs	r2, #128	; 0x80
 8003d06:	0391      	lsls	r1, r2, #14
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4a17      	ldr	r2, [pc, #92]	; (8003d68 <UART_CheckIdleState+0x8c>)
 8003d0c:	9200      	str	r2, [sp, #0]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f000 f82c 	bl	8003d6c <UART_WaitOnFlagUntilTimeout>
 8003d14:	1e03      	subs	r3, r0, #0
 8003d16:	d001      	beq.n	8003d1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e021      	b.n	8003d60 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2204      	movs	r2, #4
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d10c      	bne.n	8003d44 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2280      	movs	r2, #128	; 0x80
 8003d2e:	03d1      	lsls	r1, r2, #15
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4a0d      	ldr	r2, [pc, #52]	; (8003d68 <UART_CheckIdleState+0x8c>)
 8003d34:	9200      	str	r2, [sp, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f000 f818 	bl	8003d6c <UART_WaitOnFlagUntilTimeout>
 8003d3c:	1e03      	subs	r3, r0, #0
 8003d3e:	d001      	beq.n	8003d44 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e00d      	b.n	8003d60 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2274      	movs	r2, #116	; 0x74
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	0018      	movs	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b004      	add	sp, #16
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	01ffffff 	.word	0x01ffffff

08003d6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b094      	sub	sp, #80	; 0x50
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	1dfb      	adds	r3, r7, #7
 8003d7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d7c:	e0a3      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d80:	3301      	adds	r3, #1
 8003d82:	d100      	bne.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003d84:	e09f      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d86:	f7fc febd 	bl	8000b04 <HAL_GetTick>
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d302      	bcc.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d13d      	bne.n	8003e18 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003da4:	647b      	str	r3, [r7, #68]	; 0x44
 8003da6:	2301      	movs	r3, #1
 8003da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dac:	f383 8810 	msr	PRIMASK, r3
}
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	494c      	ldr	r1, [pc, #304]	; (8003ef0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003dbe:	400a      	ands	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	f383 8810 	msr	PRIMASK, r3
}
 8003dcc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dce:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8003dd8:	2301      	movs	r3, #1
 8003dda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dde:	f383 8810 	msr	PRIMASK, r3
}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2101      	movs	r1, #1
 8003df0:	438a      	bics	r2, r1
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfa:	f383 8810 	msr	PRIMASK, r3
}
 8003dfe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2274      	movs	r2, #116	; 0x74
 8003e10:	2100      	movs	r1, #0
 8003e12:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e067      	b.n	8003ee8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2204      	movs	r2, #4
 8003e20:	4013      	ands	r3, r2
 8003e22:	d050      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	2380      	movs	r3, #128	; 0x80
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	401a      	ands	r2, r3
 8003e30:	2380      	movs	r3, #128	; 0x80
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d146      	bne.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2280      	movs	r2, #128	; 0x80
 8003e3e:	0112      	lsls	r2, r2, #4
 8003e40:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e42:	f3ef 8310 	mrs	r3, PRIMASK
 8003e46:	613b      	str	r3, [r7, #16]
  return(result);
 8003e48:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f383 8810 	msr	PRIMASK, r3
}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4923      	ldr	r1, [pc, #140]	; (8003ef0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003e64:	400a      	ands	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f383 8810 	msr	PRIMASK, r3
}
 8003e72:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e74:	f3ef 8310 	mrs	r3, PRIMASK
 8003e78:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e7a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e7e:	2301      	movs	r3, #1
 8003e80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	f383 8810 	msr	PRIMASK, r3
}
 8003e88:	46c0      	nop			; (mov r8, r8)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2101      	movs	r1, #1
 8003e96:	438a      	bics	r2, r1
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	f383 8810 	msr	PRIMASK, r3
}
 8003ea4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2280      	movs	r2, #128	; 0x80
 8003eb6:	2120      	movs	r1, #32
 8003eb8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2274      	movs	r2, #116	; 0x74
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e010      	b.n	8003ee8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	425a      	negs	r2, r3
 8003ed6:	4153      	adcs	r3, r2
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	001a      	movs	r2, r3
 8003edc:	1dfb      	adds	r3, r7, #7
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d100      	bne.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003ee4:	e74b      	b.n	8003d7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b014      	add	sp, #80	; 0x50
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	fffffe5f 	.word	0xfffffe5f

08003ef4 <__libc_init_array>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	2600      	movs	r6, #0
 8003ef8:	4d0c      	ldr	r5, [pc, #48]	; (8003f2c <__libc_init_array+0x38>)
 8003efa:	4c0d      	ldr	r4, [pc, #52]	; (8003f30 <__libc_init_array+0x3c>)
 8003efc:	1b64      	subs	r4, r4, r5
 8003efe:	10a4      	asrs	r4, r4, #2
 8003f00:	42a6      	cmp	r6, r4
 8003f02:	d109      	bne.n	8003f18 <__libc_init_array+0x24>
 8003f04:	2600      	movs	r6, #0
 8003f06:	f000 f821 	bl	8003f4c <_init>
 8003f0a:	4d0a      	ldr	r5, [pc, #40]	; (8003f34 <__libc_init_array+0x40>)
 8003f0c:	4c0a      	ldr	r4, [pc, #40]	; (8003f38 <__libc_init_array+0x44>)
 8003f0e:	1b64      	subs	r4, r4, r5
 8003f10:	10a4      	asrs	r4, r4, #2
 8003f12:	42a6      	cmp	r6, r4
 8003f14:	d105      	bne.n	8003f22 <__libc_init_array+0x2e>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	00b3      	lsls	r3, r6, #2
 8003f1a:	58eb      	ldr	r3, [r5, r3]
 8003f1c:	4798      	blx	r3
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7ee      	b.n	8003f00 <__libc_init_array+0xc>
 8003f22:	00b3      	lsls	r3, r6, #2
 8003f24:	58eb      	ldr	r3, [r5, r3]
 8003f26:	4798      	blx	r3
 8003f28:	3601      	adds	r6, #1
 8003f2a:	e7f2      	b.n	8003f12 <__libc_init_array+0x1e>
 8003f2c:	08003f9c 	.word	0x08003f9c
 8003f30:	08003f9c 	.word	0x08003f9c
 8003f34:	08003f9c 	.word	0x08003f9c
 8003f38:	08003fa0 	.word	0x08003fa0

08003f3c <memset>:
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	1882      	adds	r2, r0, r2
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d100      	bne.n	8003f46 <memset+0xa>
 8003f44:	4770      	bx	lr
 8003f46:	7019      	strb	r1, [r3, #0]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	e7f9      	b.n	8003f40 <memset+0x4>

08003f4c <_init>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr

08003f58 <_fini>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr
